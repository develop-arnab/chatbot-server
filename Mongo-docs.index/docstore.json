[["0",{"pageContent":"MongoDB\r\ni\r\nAbout the Tutorial\r\nMongoDB is an open-source document database and leading NoSQL database. MongoDB\r\nis written in C++.\r\nThis tutorial will give you great understanding on MongoDB concepts needed to create and\r\ndeploy a highly scalable and performance-oriented database.\r\nAudience\r\nThis tutorial is designed for Software Professionals who are willing to learn MongoDB\r\nDatabase in simple and easy steps. It will throw light on MongoDB concepts and after\r\ncompleting this tutorial you will be at an intermediate level of expertise, from where you\r\ncan take yourself at higher level of expertise.\r\nPrerequisites\r\nBefore proceeding with this tutorial, you should have a basic understanding of database,\r\ntext editor and execution of programs, etc. Because we are going to develop high\r\nperformance database, so it will be good if you have an understanding on the basic\r\nconcepts of Database (RDBMS).\r\nCopyright & Disclaimer\r\n Copyright 2018 by Tutorials Point (I) Pvt. Ltd.","metadata":{"loc":{"lines":{"from":1,"to":19}}}}],["1",{"pageContent":"performance database, so it will be good if you have an understanding on the basic\r\nconcepts of Database (RDBMS).\r\nCopyright & Disclaimer\r\n Copyright 2018 by Tutorials Point (I) Pvt. Ltd.\r\nAll the content and graphics published in this e-book are the property of Tutorials Point (I)\r\nPvt. Ltd. The user of this e-book is prohibited to reuse, retain, copy, distribute or republish\r\nany contents or a part of contents of this e-book in any manner without written consent\r\nof the publisher.\r\nWe strive to update the contents of our website and tutorials as timely and as precisely as\r\npossible, however, the contents may contain inaccuracies or errors. Tutorials Point (I) Pvt.\r\nLtd. provides no guarantee regarding the accuracy, timeliness or completeness of our\r\nwebsite or its contents including this tutorial. If you discover any errors on our website or\r\nin this tutorial, please notify us at contact@tutorialspoint.com\r\nMongoDB\r\nii\r\nTable of Contents","metadata":{"loc":{"lines":{"from":19,"to":34}}}}],["2",{"pageContent":"website or its contents including this tutorial. If you discover any errors on our website or\r\nin this tutorial, please notify us at contact@tutorialspoint.com\r\nMongoDB\r\nii\r\nTable of Contents\r\nAbout the Tutorial ............................................................................................................................................... i\r\nAudience .............................................................................................................................................................. i\r\nPrerequisites ........................................................................................................................................................ i\r\nCopyright & Disclaimer ........................................................................................................................................ i","metadata":{"loc":{"lines":{"from":34,"to":42}}}}],["3",{"pageContent":"Copyright & Disclaimer ........................................................................................................................................ i\r\nTable of Contents................................................................................................................................................ ii\r\nMONGODB.................................................................................................................................. 1\r\n1. MongoDB ─ Overview ............................................................................................................................. 2\r\n2. MongoDB ─ Advantages .......................................................................................................................... 4\r\n3. MongoDB ─ Environment ........................................................................................................................ 5","metadata":{"loc":{"lines":{"from":42,"to":47}}}}],["4",{"pageContent":"3. MongoDB ─ Environment ........................................................................................................................ 5\r\n4. MongoDB ─ Data Modelling .................................................................................................................. 10\r\n5. MongoDB ─ Create Database ................................................................................................................ 12\r\n6. MongoDB ─ Drop Database ................................................................................................................... 13\r\n7. MongoDB ─ Create Collection ............................................................................................................... 14\r\n8. MongoDB ─ Drop Collection .................................................................................................................. 16","metadata":{"loc":{"lines":{"from":47,"to":52}}}}],["5",{"pageContent":"8. MongoDB ─ Drop Collection .................................................................................................................. 16\r\n9. MongoDB ─ Datatypes .......................................................................................................................... 17\r\n10. MongoDB ─ Insert Document ................................................................................................................ 18\r\n11. MongoDB ─ Query Document ............................................................................................................... 20\r\n12. MongoDB ─ Update Document ............................................................................................................. 24\r\n13. MongoDB ─ Delete Document ............................................................................................................... 26","metadata":{"loc":{"lines":{"from":52,"to":57}}}}],["6",{"pageContent":"13. MongoDB ─ Delete Document ............................................................................................................... 26\r\n14. MongoDB ─ Projection .......................................................................................................................... 28\r\n15. MongoDB ─ Limit Records ..................................................................................................................... 29\r\n16. MongoDB ─ Sort Records ...................................................................................................................... 31\r\n17. MongoDB ─ Indexing ............................................................................................................................. 32\r\n18. MongoDB ─ Aggregation ....................................................................................................................... 34","metadata":{"loc":{"lines":{"from":57,"to":62}}}}],["7",{"pageContent":"18. MongoDB ─ Aggregation ....................................................................................................................... 34\r\n19. MongoDB ─ Replication ......................................................................................................................... 38\r\n20. MongoDB ─ Sharding............................................................................................................................. 41\r\n21. MongoDB ─ Create Backup .................................................................................................................... 43\r\nMongoDB\r\niii\r\n22. MongoDB ─ Deployment ....................................................................................................................... 45\r\n23. MongoDB ─ Java.................................................................................................................................... 48","metadata":{"loc":{"lines":{"from":62,"to":69}}}}],["8",{"pageContent":"23. MongoDB ─ Java.................................................................................................................................... 48\r\n24. MongoDB ─ PHP .................................................................................................................................... 60\r\nADVANCED MONGODB ............................................................................................................. 66\r\n25. MongoDB ─ Relationships ..................................................................................................................... 67\r\n26. MongoDB ─ Database References ......................................................................................................... 70\r\n27. MongoDB ─ Covered Queries ................................................................................................................ 72","metadata":{"loc":{"lines":{"from":69,"to":74}}}}],["9",{"pageContent":"27. MongoDB ─ Covered Queries ................................................................................................................ 72\r\n28. MongoDB ─ Analyzing Queries .............................................................................................................. 74\r\n29. MongoDB ─ Atomic Operations ............................................................................................................. 76\r\n30. MongoDB ─ Advanced Indexing ............................................................................................................ 78\r\n31. MongoDB ─ Indexing Limitations .......................................................................................................... 80\r\n32. MongoDB ─ ObjectId ............................................................................................................................. 81","metadata":{"loc":{"lines":{"from":74,"to":79}}}}],["10",{"pageContent":"32. MongoDB ─ ObjectId ............................................................................................................................. 81\r\n33. MongoDB ─ MapReduce........................................................................................................................ 83\r\n34. MongoDB ─ Text Search ........................................................................................................................ 86\r\n35. MongoDB ─ Regular Expression ............................................................................................................. 88\r\n36. MongoDB ─ RockMongo........................................................................................................................ 90\r\n37. MongoDB ─ GridFS ................................................................................................................................ 91","metadata":{"loc":{"lines":{"from":79,"to":84}}}}],["11",{"pageContent":"37. MongoDB ─ GridFS ................................................................................................................................ 91\r\n38. MongoDB ─ Capped Collections ............................................................................................................ 93\r\n39. MongoDB ─ Auto-Increment Sequence ................................................................................................. 95\r\nMongoDB\r\n4\r\nMongoDB\r\nMongoDB\r\n5\r\nMongoDB is a cross-platform, document oriented database that provides, high performance,\r\nhigh availability, and easy scalability. MongoDB works on concept of collection and document.\r\nDatabase\r\nDatabase is a physical container for collections. Each database gets its own set of files on the\r\nfile system. A single MongoDB server typically has multiple databases.\r\nCollection\r\nCollection is a group of MongoDB documents. It is the equivalent of an RDBMS table. A","metadata":{"loc":{"lines":{"from":84,"to":98}}}}],["12",{"pageContent":"file system. A single MongoDB server typically has multiple databases.\r\nCollection\r\nCollection is a group of MongoDB documents. It is the equivalent of an RDBMS table. A\r\ncollection exists within a single database. Collections do not enforce a schema. Documents\r\nwithin a collection can have different fields. Typically, all documents in a collection are of\r\nsimilar or related purpose.\r\nDocument\r\nA document is a set of key-value pairs. Documents have dynamic schema. Dynamic schema\r\nmeans that documents in the same collection do not need to have the same set of fields or\r\nstructure, and common fields in a collection's documents may hold different types of data.\r\nThe following table shows the relationship of RDBMS terminology with MongoDB.\r\nRDBMS MongoDB\r\nDatabase Database\r\nTable Collection\r\nTuple/Row Document\r\ncolumn Field\r\nTable Join Embedded Documents\r\nPrimary Key Primary Key (Default key _id provided by\r\nmongodb itself)\r\nDatabase Server and Client\r\nMysqld/Oracle mongod\r\n1. MongoDB ─ Overview\r\nMongoDB\r\n6","metadata":{"loc":{"lines":{"from":98,"to":121}}}}],["13",{"pageContent":"column Field\r\nTable Join Embedded Documents\r\nPrimary Key Primary Key (Default key _id provided by\r\nmongodb itself)\r\nDatabase Server and Client\r\nMysqld/Oracle mongod\r\n1. MongoDB ─ Overview\r\nMongoDB\r\n6\r\nmysql/sqlplus mongo\r\nSample Document\r\nFollowing example shows the document structure of a blog site, which is simply a comma\r\nseparated key value pair.\r\n{\r\n_id: ObjectId(7df78ad8902c)\r\ntitle: 'MongoDB Overview',\r\ndescription: 'MongoDB is no sql database',\r\nby: 'tutorials point',\r\nurl: 'http://www.tutorialspoint.com',\r\ntags: ['mongodb', 'database', 'NoSQL'],\r\nlikes: 100,\r\ncomments: [\r\n{\r\nuser:'user1',\r\nmessage: 'My first comment',\r\ndateCreated: new Date(2011,1,20,2,15),\r\nlike: 0\r\n},\r\n{\r\nuser:'user2',\r\nmessage: 'My second comments',\r\ndateCreated: new Date(2011,1,25,7,45),\r\nlike: 5\r\n}\r\n]\r\n}\r\n_id is a 12 bytes hexadecimal number which assures the uniqueness of every document. You\r\ncan provide _id while inserting the document. If you don’t provide then MongoDB provides a","metadata":{"loc":{"lines":{"from":121,"to":158}}}}],["14",{"pageContent":"like: 5\r\n}\r\n]\r\n}\r\n_id is a 12 bytes hexadecimal number which assures the uniqueness of every document. You\r\ncan provide _id while inserting the document. If you don’t provide then MongoDB provides a\r\nunique id for every document. These 12 bytes first 4 bytes for the current timestamp, next 3\r\nbytes for machine id, next 2 bytes for process id of MongoDB server and remaining 3 bytes\r\nare simple incremental VALUE.\r\nMongoDB\r\n7\r\nAny relational database has a typical schema design that shows number of tables and the\r\nrelationship between these tables. While in MongoDB, there is no concept of relationship.\r\nAdvantages of MongoDB over RDBMS\r\n Schema less: MongoDB is a document database in which one collection holds different\r\ndocuments. Number of fields, content and size of the document can differ from one\r\ndocument to another.\r\n Structure of a single object is clear.\r\n No complex joins.\r\n Deep query-ability. MongoDB supports dynamic queries on documents using a","metadata":{"loc":{"lines":{"from":158,"to":177}}}}],["15",{"pageContent":"document to another.\r\n Structure of a single object is clear.\r\n No complex joins.\r\n Deep query-ability. MongoDB supports dynamic queries on documents using a\r\ndocument-based query language that's nearly as powerful as SQL.\r\n Tuning.\r\n Ease of scale-out: MongoDB is easy to scale.\r\n Conversion/mapping of application objects to database objects not needed.\r\n Uses internal memory for storing the (windowed) working set, enabling faster access\r\nof data.\r\nWhy Use MongoDB?\r\n Document Oriented Storage: Data is stored in the form of JSON style documents.\r\n Index on any attribute\r\n Replication and high availability\r\n Auto-sharding\r\n Rich queries\r\n Fast in-place updates\r\n Professional support by MongoDB\r\nWhere to Use MongoDB?\r\n Big Data\r\n Content Management and Delivery\r\n Mobile and Social Infrastructure\r\n2. MongoDB ─ Advantages\r\nMongoDB\r\n8\r\n User Data Management\r\n Data Hub\r\nMongoDB\r\n9\r\nLet us now see how to install MongoDB on Windows.\r\nInstall MongoDB on Windows","metadata":{"loc":{"lines":{"from":177,"to":207}}}}],["16",{"pageContent":" Mobile and Social Infrastructure\r\n2. MongoDB ─ Advantages\r\nMongoDB\r\n8\r\n User Data Management\r\n Data Hub\r\nMongoDB\r\n9\r\nLet us now see how to install MongoDB on Windows.\r\nInstall MongoDB on Windows\r\nTo install MongoDB on Windows, first download the latest release of MongoDB\r\nfrom http://www.mongodb.org/downloads. Make sure you get correct version of MongoDB\r\ndepending upon your Windows version. To get your Windows version, open command prompt\r\nand execute the following command.\r\nC:\\>wmic os get osarchitecture\r\nOSArchitecture\r\n64-bit\r\nC:\\>\r\n32-bit versions of MongoDB only support databases smaller than 2GB and suitable only for\r\ntesting and evaluation purposes.\r\nNow extract your downloaded file to c:\\ drive or any other location. Make sure the name of\r\nthe extracted folder is mongodb-win32-i386-[version] or mongodb-win32-x86_64-[version].\r\nHere [version] is the version of MongoDB download.\r\nNext, open the command prompt and run the following command.\r\nC:\\>move mongodb-win64-* mongodb\r\n1 dir(s) moved.\r\nC:\\>","metadata":{"loc":{"lines":{"from":207,"to":233}}}}],["17",{"pageContent":"Here [version] is the version of MongoDB download.\r\nNext, open the command prompt and run the following command.\r\nC:\\>move mongodb-win64-* mongodb\r\n1 dir(s) moved.\r\nC:\\>\r\nIn case you have extracted the MongoDB at different location, then go to that path by using\r\ncommand cd FOOLDER/DIR and now run the above given process.\r\nMongoDB requires a data folder to store its files. The default location for the MongoDB data\r\ndirectory is c:\\data\\db. So you need to create this folder using the Command Prompt. Execute\r\nthe following command sequence.\r\nC:\\>md data\r\nC:\\md data\\db\r\nIf you have to install the MongoDB at a different location, then you need to specify an alternate\r\npath for \\data\\db by setting the path dbpath in mongod.exe. For the same, issue the\r\nfollowing commands.\r\n3. MongoDB ─ Environment\r\nMongoDB\r\n10\r\nIn the command prompt, navigate to the bin directory present in the MongoDB installation\r\nfolder. Suppose my installation folder is D:\\set up\\mongodb\r\nC:\\Users\\XYZ>d:\r\nD:\\>cd \"set up\"","metadata":{"loc":{"lines":{"from":233,"to":254}}}}],["18",{"pageContent":"MongoDB\r\n10\r\nIn the command prompt, navigate to the bin directory present in the MongoDB installation\r\nfolder. Suppose my installation folder is D:\\set up\\mongodb\r\nC:\\Users\\XYZ>d:\r\nD:\\>cd \"set up\"\r\nD:\\set up>cd mongodb\r\nD:\\set up\\mongodb>cd bin\r\nD:\\set up\\mongodb\\bin>mongod.exe --dbpath \"d:\\set up\\mongodb\\data\"\r\nThis will show waiting for connections message on the console output, which indicates that\r\nthe mongod.exe process is running successfully.\r\nNow to run the MongoDB, you need to open another command prompt and issue the following\r\ncommand.\r\nD:\\set up\\mongodb\\bin>mongo.exe\r\nMongoDB shell version: 2.4.6\r\nconnecting to: test\r\n>db.test.save( { a: 1 } )\r\n>db.test.find()\r\n{ \"_id\" : ObjectId(5879b0f65a56a454), \"a\" : 1 }\r\n>\r\nThis will show that MongoDB is installed and run successfully. Next time when you run\r\nMongoDB, you need to issue only commands.\r\nD:\\set up\\mongodb\\bin>mongod.exe --dbpath \"d:\\set up\\mongodb\\data\"\r\nD:\\set up\\mongodb\\bin>mongo.exe\r\nInstall MongoDB on Ubuntu","metadata":{"loc":{"lines":{"from":254,"to":278}}}}],["19",{"pageContent":"MongoDB, you need to issue only commands.\r\nD:\\set up\\mongodb\\bin>mongod.exe --dbpath \"d:\\set up\\mongodb\\data\"\r\nD:\\set up\\mongodb\\bin>mongo.exe\r\nInstall MongoDB on Ubuntu\r\nRun the following command to import the MongoDB public GPG key −\r\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\r\nCreate a /etc/apt/sources.list.d/mongodb.list file using the following command.\r\necho 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen'\r\n| sudo tee /etc/apt/sources.list.d/mongodb.list\r\nNow issue the following command to update the repository −\r\nsudo apt-get update\r\nMongoDB\r\n11\r\nNext install the MongoDB by using the following command −\r\napt-get install mongodb-10gen=2.2.3\r\nIn the above installation, 2.2.3 is currently released MongoDB version. Make sure to install\r\nthe latest version always. Now MongoDB is installed successfully.\r\nStart MongoDB\r\nsudo service mongodb start\r\nStop MongoDB\r\nsudo service mongodb stop\r\nRestart MongoDB\r\nsudo service mongodb restart","metadata":{"loc":{"lines":{"from":278,"to":300}}}}],["20",{"pageContent":"the latest version always. Now MongoDB is installed successfully.\r\nStart MongoDB\r\nsudo service mongodb start\r\nStop MongoDB\r\nsudo service mongodb stop\r\nRestart MongoDB\r\nsudo service mongodb restart\r\nTo use MongoDB run the following command.\r\nmongo\r\nThis will connect you to running MongoDB instance.\r\nMongoDB Help\r\nTo get a list of commands, type db.help() in MongoDB client. This will give you a list of\r\ncommands as shown in the following screenshot.\r\nMongoDB\r\n12\r\nMongoDB\r\n13\r\nMongoDB Statistics\r\nTo get stats about MongoDB server, type the command db.stats() in MongoDB client. This\r\nwill show the database name, number of collection and documents in the database. Output\r\nof the command is shown in the following screenshot.\r\nMongoDB\r\n14\r\nData in MongoDB has a flexible schema.documents in the same collection. They do not need\r\nto have the same set of fields or structure, and common fields in a collection’s documents\r\nmay hold different types of data.\r\nSome considerations while designing Schema in MongoDB","metadata":{"loc":{"lines":{"from":300,"to":326}}}}],["21",{"pageContent":"to have the same set of fields or structure, and common fields in a collection’s documents\r\nmay hold different types of data.\r\nSome considerations while designing Schema in MongoDB\r\n Design your schema according to user requirements.\r\n Combine objects into one document if you will use them together. Otherwise separate\r\nthem (but make sure there should not be need of joins).\r\n Duplicate the data (but limited) because disk space is cheap as compare to compute\r\ntime.\r\n Do joins while write, not on read.\r\n Optimize your schema for most frequent use cases.\r\n Do complex aggregation in the schema.\r\nExample\r\nSuppose a client needs a database design for his blog/website and see the differences\r\nbetween RDBMS and MongoDB schema design. Website has the following requirements.\r\n Every post has the unique title, description and url.\r\n Every post can have one or more tags.\r\n Every post has the name of its publisher and total number of likes.","metadata":{"loc":{"lines":{"from":326,"to":342}}}}],["22",{"pageContent":" Every post has the unique title, description and url.\r\n Every post can have one or more tags.\r\n Every post has the name of its publisher and total number of likes.\r\n Every post has comments given by users along with their name, message, data-time\r\nand likes.\r\n On each post, there can be zero or more comments.\r\nIn RDBMS schema, design for above requirements will have minimum three tables.\r\n4. MongoDB ─ Data Modelling\r\nMongoDB\r\n15\r\nWhile in MongoDB schema, design will have one collection post and the following structure:\r\n{\r\n_id: POST_ID\r\ntitle: TITLE_OF_POST,\r\ndescription: POST_DESCRIPTION,\r\nby: POST_BY,\r\nurl: URL_OF_POST,\r\ntags: [TAG1, TAG2, TAG3],\r\nlikes: TOTAL_LIKES,\r\ncomments: [\r\n{\r\nuser:'COMMENT_BY',\r\nmessage: TEXT,\r\ndateCreated: DATE_TIME,\r\nlike: LIKES\r\n},\r\n{\r\nuser:'COMMENT_BY',\r\nmessage: TEXT,\r\ndateCreated: DATE_TIME,\r\nlike: LIKES\r\n}\r\n]\r\n}\r\nMongoDB\r\n16\r\nSo while showing the data, in RDBMS you need to join three tables and in MongoDB, data will\r\nbe shown from one collection only.\r\nMongoDB\r\n17","metadata":{"loc":{"lines":{"from":342,"to":381}}}}],["23",{"pageContent":"dateCreated: DATE_TIME,\r\nlike: LIKES\r\n}\r\n]\r\n}\r\nMongoDB\r\n16\r\nSo while showing the data, in RDBMS you need to join three tables and in MongoDB, data will\r\nbe shown from one collection only.\r\nMongoDB\r\n17\r\nIn this chapter, we will see how to create a database in MongoDB.\r\nThe use Command\r\nMongoDB use DATABASE_NAME is used to create database. The command will create a\r\nnew database if it doesn't exist, otherwise it will return the existing database.\r\nSyntax\r\nBasic syntax of use DATABASE statement is as follows:\r\nuse DATABASE_NAME\r\nExample\r\nIf you want to create a database with name <mydb>, then use DATABASE statement would\r\nbe as follows:\r\n>use mydb\r\nswitched to db mydb\r\nTo check your currently selected database, use the command db\r\n>db\r\nmydb\r\nIf you want to check your databases list, use the command show dbs.\r\n>show dbs\r\nlocal 0.78125GB\r\ntest 0.23012GB\r\nYour created database (mydb) is not present in list. To display database, you need to insert\r\nat least one document into it.","metadata":{"loc":{"lines":{"from":381,"to":412}}}}],["24",{"pageContent":">show dbs\r\nlocal 0.78125GB\r\ntest 0.23012GB\r\nYour created database (mydb) is not present in list. To display database, you need to insert\r\nat least one document into it.\r\n>db.movie.insert({\"name\":\"tutorials point\"})\r\n>show dbs\r\nlocal 0.78125GB\r\nmydb 0.23012GB\r\n5. MongoDB ─ Create Database\r\nMongoDB\r\n18\r\ntest 0.23012GB\r\nIn MongoDB default database is test. If you didn't create any database, then collections will\r\nbe stored in test database.\r\nMongoDB\r\n19\r\nIn this chapter, we will see how to drop a database using MongoDB command.\r\nThe dropDatabase() Method\r\nMongoDB db.dropDatabase() command is used to drop a existing database.\r\nSyntax\r\nBasic syntax of dropDatabase() command is as follows:\r\ndb.dropDatabase()\r\nThis will delete the selected database. If you have not selected any database, then it will\r\ndelete default 'test' database.\r\nExample\r\nFirst, check the list of available databases by using the command, show dbs.\r\n>show dbs\r\nlocal 0.78125GB\r\nmydb 0.23012GB\r\ntest 0.23012GB\r\n>","metadata":{"loc":{"lines":{"from":412,"to":443}}}}],["25",{"pageContent":"delete default 'test' database.\r\nExample\r\nFirst, check the list of available databases by using the command, show dbs.\r\n>show dbs\r\nlocal 0.78125GB\r\nmydb 0.23012GB\r\ntest 0.23012GB\r\n>\r\nIf you want to delete new database <mydb>, then dropDatabase() command would be as\r\nfollows:\r\n>use mydb\r\nswitched to db mydb\r\n>db.dropDatabase()\r\n>{ \"dropped\" : \"mydb\", \"ok\" : 1 }\r\n>\r\nNow check list of databases.\r\n>show dbs\r\nlocal 0.78125GB\r\ntest 0.23012GB>\r\n6. MongoDB ─ Drop Database\r\nMongoDB\r\n20\r\nIn this chapter, we will see how to create a collection using MongoDB.\r\nThe createCollection() Method\r\nMongoDB db.createCollection(name, options) is used to create collection.\r\nSyntax\r\nBasic syntax of createCollection() command is as follows:\r\ndb.createCollection(name, options)\r\nIn the command, name is name of collection to be created. Options is a document and is\r\nused to specify configuration of collection.\r\nParameter Type Description\r\nName String Name of the collection to be created","metadata":{"loc":{"lines":{"from":443,"to":474}}}}],["26",{"pageContent":"used to specify configuration of collection.\r\nParameter Type Description\r\nName String Name of the collection to be created\r\nOptions Document (Optional) Specify options about memory\r\nsize and indexing\r\nOptions parameter is optional, so you need to specify only the name of the collection.\r\nFollowing is the list of options you can use:\r\nField Type Description\r\ncapped Boolean\r\n(Optional) If true, enables a capped collection. Capped\r\ncollection is a fixed size collection that automatically\r\noverwrites its oldest entries when it reaches its maximum\r\nsize. If you specify true, you need to specify size\r\nparameter also.\r\nautoIndexID Boolean (Optional) If true, automatically create index on _id field.\r\nDefault value is false.\r\nsize number\r\n(Optional) Specifies a maximum size in bytes for a capped\r\ncollection. If capped is true, then you need to specify\r\nthis field also.\r\n7. MongoDB ─ Create Collection\r\nMongoDB\r\n21\r\nmax number (Optional) Specifies the maximum number of documents\r\nallowed in the capped collection.","metadata":{"loc":{"lines":{"from":474,"to":498}}}}],["27",{"pageContent":"this field also.\r\n7. MongoDB ─ Create Collection\r\nMongoDB\r\n21\r\nmax number (Optional) Specifies the maximum number of documents\r\nallowed in the capped collection.\r\nWhile inserting the document, MongoDB first checks size field of capped collection, then it\r\nchecks max field.\r\nExamples\r\nBasic syntax of createCollection() method without options is as follows:\r\n>use test\r\nswitched to db test\r\n>db.createCollection(\"mycollection\")\r\n{ \"ok\" : 1 }\r\n>\r\nYou can check the created collection by using the command show collections.\r\n>show collections\r\nmycollection\r\nsystem.indexes\r\nThe following example shows the syntax of createCollection() method with few important\r\noptions:\r\n>db.createCollection(\"mycol\", { capped : true, autoIndexID : true, size : 6142800,\r\nmax : 10000 } )\r\n{ \"ok\" : 1 }\r\n>\r\nIn MongoDB, you don't need to create collection. MongoDB creates collection automatically,\r\nwhen you insert some document.\r\n>db.tutorialspoint.insert({\"name\" : \"tutorialspoint\"})\r\n>show collections\r\nmycol\r\nmycollection\r\nsystem.indexes","metadata":{"loc":{"lines":{"from":498,"to":529}}}}],["28",{"pageContent":"when you insert some document.\r\n>db.tutorialspoint.insert({\"name\" : \"tutorialspoint\"})\r\n>show collections\r\nmycol\r\nmycollection\r\nsystem.indexes\r\ntutorialspoint\r\n>\r\nMongoDB\r\n22\r\n\r\nMongoDB\r\n#mongodb\r\nTable of Contents\r\nAbout 1\r\nChapter 1: Getting started with MongoDB 2\r\nRemarks 2\r\nVersions 2\r\nExamples 3\r\nInstallation 3\r\nHello World 6\r\nComplementary Terms 6\r\nExecution of a JavaScript file in MongoDB 7\r\nMaking the output of find readable in shell 7\r\nBasic commands on mongo shell 8\r\nChapter 2: 2dsphere Index 9\r\nExamples 9\r\nCreate a 2dsphere Index 9\r\nChapter 3: Aggregation 10\r\nIntroduction 10\r\nSyntax 10\r\nParameters 10\r\nRemarks 10\r\nExamples 10\r\nCount 10\r\nSum 11\r\nAverage 12\r\nOperations with arrays. 13\r\nMatch 13\r\nRemove docs that have a duplicate field in a collection (dedupe) 14\r\nChapter 4: Authentication Mechanisms in MongoDB 15\r\nIntroduction 15\r\nExamples 15\r\nAuthentication Mechanisms 15\r\nChapter 5: Backing up and Restoring Data 16\r\nExamples 16\r\nmongoimport with JSON 16\r\nmongoimport with CSV 16\r\nChapter 6: Backing up and Restoring Data 18","metadata":{"loc":{"lines":{"from":529,"to":577}}}}],["29",{"pageContent":"Examples 15\r\nAuthentication Mechanisms 15\r\nChapter 5: Backing up and Restoring Data 16\r\nExamples 16\r\nmongoimport with JSON 16\r\nmongoimport with CSV 16\r\nChapter 6: Backing up and Restoring Data 18\r\nExamples 18\r\nBasic mongodump of local default mongod instance 18\r\nBasic mongorestore of local default mongod dump 18\r\nChapter 7: Bulk Operations 19\r\nRemarks 19\r\nExamples 19\r\nConverting a field to another type and updating the entire collection in Bulk 19\r\nChapter 8: Collections 22\r\nRemarks 22\r\nExamples 22\r\nCreate a Collection 22\r\nDrop Collection 23\r\nChapter 9: Configuration 24\r\nParameters 24\r\nExamples 26\r\nStarting mongo with a specific config file 26\r\nChapter 10: CRUD Operation 27\r\nSyntax 27\r\nRemarks 27\r\nExamples 27\r\nCreate 27\r\nUpdate 28\r\nDelete 28\r\nRead 29\r\nMore update operators 30\r\n\"multi\" Parameter while updating multiple documents 30\r\nUpdate of embedded documents. 31\r\nChapter 11: Getting database information 32\r\nExamples 32\r\nList all databases 32\r\nList all collections in database 32\r\nChapter 12: Indexes 33\r\nSyntax 33","metadata":{"loc":{"lines":{"from":577,"to":616}}}}],["30",{"pageContent":"Update of embedded documents. 31\r\nChapter 11: Getting database information 32\r\nExamples 32\r\nList all databases 32\r\nList all collections in database 32\r\nChapter 12: Indexes 33\r\nSyntax 33\r\nRemarks 33\r\nExamples 33\r\nSingle field 33\r\nCompound 33\r\nDelete 33\r\nList 34\r\nIndex Creation Basics 34\r\nHashed indexes 36\r\nDropping/Deleting an Index 36\r\nGet Indices of a Collection 37\r\nUnique Index 37\r\nSparse indexes and Partial indexes 37\r\nChapter 13: Java Driver 39\r\nExamples 39\r\nCreate a tailable cursor 39\r\nCreate a database user 39\r\nFetch Collection data with condition 39\r\nChapter 14: Managing MongoDB 41\r\nExamples 41\r\nListing currently running queries 41\r\nChapter 15: Mongo as a Replica Set 42\r\nExamples 42\r\nMongodb as a Replica Set 42\r\nChapter 16: Mongo as a Replica Set 44\r\nExamples 44\r\nCheck MongoDB Replica Set states 44\r\nChapter 17: Mongo as Shards 46\r\nExamples 46\r\nSharding Environment Setup 46\r\nChapter 18: MongoDB - Configure a ReplicaSet to support TLS/SSL 48\r\nIntroduction 48\r\nExamples 48","metadata":{"loc":{"lines":{"from":616,"to":654}}}}],["31",{"pageContent":"Chapter 17: Mongo as Shards 46\r\nExamples 46\r\nSharding Environment Setup 46\r\nChapter 18: MongoDB - Configure a ReplicaSet to support TLS/SSL 48\r\nIntroduction 48\r\nExamples 48\r\nHow to configure a ReplicaSet to support TLS/SSL? 48\r\nCreate the Root Certificate 48\r\nGenerate the Certificate Requests and the Private Keys 48\r\nSign your Certificate Requests 49\r\nConcat each Node Certificate with its key 49\r\nDeploy your ReplicaSet 50\r\nDeploy your ReplicaSet for Mutual SSL / Mutual Trust 50\r\nHow to connect your Client (Mongo Shell) to a ReplicaSet? 50\r\nNo Mutual SSL 50\r\nWith Mutual SSL 51\r\nChapter 19: MongoDB Aggregation 53\r\nExamples 53\r\nAggregate query examples useful for work and learning 53\r\nJava and Spring example 57\r\nGet sample data 58\r\nLeft Outer Join with aggregation ( $Lookup) 58\r\nChapter 20: MongoDB Authorization Model 60\r\nIntroduction 60\r\nExamples 60\r\nBuild-in Roles 60\r\nChapter 21: Pluggable Storage Engines 61\r\nRemarks 61\r\nExamples 61\r\nMMAP 61\r\nWiredTiger 61\r\nHow to use WiredTiger Engine 61\r\nIn-memory 62","metadata":{"loc":{"lines":{"from":654,"to":686}}}}],["32",{"pageContent":"Introduction 60\r\nExamples 60\r\nBuild-in Roles 60\r\nChapter 21: Pluggable Storage Engines 61\r\nRemarks 61\r\nExamples 61\r\nMMAP 61\r\nWiredTiger 61\r\nHow to use WiredTiger Engine 61\r\nIn-memory 62\r\nmongo-rocks 62\r\nFusion-io 62\r\nTokuMX 62\r\nChapter 22: Python Driver 63\r\nSyntax 63\r\nParameters 63\r\nExamples 63\r\nConnect to MongoDB using pymongo 63\r\nPyMongo queries 63\r\nUpdate all documents in a collection using PyMongo 64\r\nChapter 23: Querying for Data ( Getting Started ) 65\r\nIntroduction 65\r\nExamples 65\r\nFind() 65\r\nFindOne() 65\r\nQuery Document - Using AND, OR and IN Conditions 66\r\nfind() method with Projection 68\r\nFind() method with Projection 68\r\nlimit, skip, sort and count the results of the find() method 69\r\nChapter 24: Replication 71\r\nExamples 71\r\nBasic configuration with three nodes 71\r\nChapter 25: Update Operators 73\r\nSyntax 73\r\nParameters 73\r\nRemarks 73\r\nExamples 73\r\n$set operator to update specified field(s) in document(s) 73\r\nI.Overview 73\r\nII.What happen if we don't use update operators? 73\r\nIII.$set operator 74","metadata":{"loc":{"lines":{"from":686,"to":726}}}}],["33",{"pageContent":"Syntax 73\r\nParameters 73\r\nRemarks 73\r\nExamples 73\r\n$set operator to update specified field(s) in document(s) 73\r\nI.Overview 73\r\nII.What happen if we don't use update operators? 73\r\nIII.$set operator 74\r\nChapter 26: Upgrading MongoDB version 76\r\nIntroduction 76\r\nRemarks 76\r\nExamples 76\r\nUpgrading to 3.4 on Ubuntu 16.04 using apt 76\r\nChapter 27: Upserts and Inserts 77\r\nExamples 77\r\nInsert a document 77\r\nCredits 78\r\nAbout\r\nYou can share this PDF with anyone you feel could benefit from it, downloaded the latest version\r\nfrom: mongodb\r\nIt is an unofficial and free MongoDB ebook created for educational purposes. All the content is\r\nextracted from Stack Overflow Documentation, which is written by many hardworking individuals at\r\nStack Overflow. It is neither affiliated with Stack Overflow nor official MongoDB.\r\nThe content is released under Creative Commons BY-SA, and the list of contributors to each\r\nchapter are provided in the credits section at the end of this book. Images may be copyright of","metadata":{"loc":{"lines":{"from":726,"to":750}}}}],["34",{"pageContent":"The content is released under Creative Commons BY-SA, and the list of contributors to each\r\nchapter are provided in the credits section at the end of this book. Images may be copyright of\r\ntheir respective owners unless otherwise specified. All trademarks and registered trademarks are\r\nthe property of their respective company owners.\r\nUse the content presented in this book at your own risk; it is not guaranteed to be correct nor\r\naccurate, please send your feedback and corrections to info@zzzprojects.com\r\nhttps://riptutorial.com/ 1\r\nChapter 1: Getting started with MongoDB\r\nRemarks\r\nData in the world started to grow tremendously after mobile application came in the market.\r\nThis huge amount of data became almost impossible to handle with traditional relational\r\ndatabase - SQL. NoSQL databases are introduced to handle those data where much more\r\nflexibility came like variable number of columns for each data.\r\n•\r\nMongoDB is one of the leading NoSQL databases. Each collection contains a number of","metadata":{"loc":{"lines":{"from":750,"to":764}}}}],["35",{"pageContent":"flexibility came like variable number of columns for each data.\r\n•\r\nMongoDB is one of the leading NoSQL databases. Each collection contains a number of\r\nJSON documents. Any data model that can be expressed in a JSON document can be easily\r\nstored in MongoDB.\r\n•\r\nMongoDB is a server-client database. Server usually runs with the binary file mongod and\r\nclient runs with mongo.\r\n•\r\nThere is no join operation in MongoDB prior to v.3.2, for various philosophical and pragmatic\r\nreasons. But Mongo shell supports javascript, so if $lookup is not available, one can simulate\r\njoin operations on documents in javascript before inserting.\r\n•\r\nTo run an instance in production environment, it's strongly advised to follow the Operations\r\nChecklist.\r\n•\r\nVersions\r\nVersion Release Date\r\n3.4 2016-11-29\r\n3.2 2015-12-08\r\n3.0 2015-03-03\r\n2.6 2014-04-08\r\n2.4 2013-03-19\r\n2.2 2012-08-29\r\n2.0 2011-09-12\r\n1.8 2011-03-16\r\n1.6 2010-08-31\r\n1.4 2010-03-25\r\n1.2 2009-12-10\r\nhttps://riptutorial.com/ 2\r\nExamples\r\nInstallation","metadata":{"loc":{"lines":{"from":764,"to":795}}}}],["36",{"pageContent":"3.2 2015-12-08\r\n3.0 2015-03-03\r\n2.6 2014-04-08\r\n2.4 2013-03-19\r\n2.2 2012-08-29\r\n2.0 2011-09-12\r\n1.8 2011-03-16\r\n1.6 2010-08-31\r\n1.4 2010-03-25\r\n1.2 2009-12-10\r\nhttps://riptutorial.com/ 2\r\nExamples\r\nInstallation\r\nTo install MongoDB, follow the steps below:\r\nFor Mac OS:\r\nThere are two options for Mac OS: manual install or homebrew.○\r\nInstalling with homebrew:\r\nType the following command into the terminal:\r\n$ brew install mongodb\r\n○\r\n○\r\nInstalling manually:\r\nDownload the latest release here. Make sure that you are downloading the\r\nappropriate file, specially check whether your operating system type is 32-bit or\r\n64-bit. The downloaded file is in format tgz.\r\n○\r\nGo to the directory where this file is downloaded. Then type the following\r\ncommand:\r\n$ tar xvf mongodb-osx-xyz.tgz\r\nInstead of xyz, there would be some version and system type information. The\r\nextracted folder would be same name as the tgz file. Inside the folder, their would\r\nbe a subfolder named bin which would contain several binary file along with","metadata":{"loc":{"lines":{"from":795,"to":826}}}}],["37",{"pageContent":"extracted folder would be same name as the tgz file. Inside the folder, their would\r\nbe a subfolder named bin which would contain several binary file along with\r\nmongod and mongo.\r\n○\r\nBy default server keeps data in folder /data/db. So, we have to create that\r\ndirectory and then run the server having the following commands:\r\n$ sudo bash\r\n# mkdir -p /data/db\r\n# chmod 777 /data\r\n# chmod 777 /data/db\r\n# exit\r\n○\r\nTo start the server, the following command should be given from the current\r\nlocation:\r\n$ ./mongod\r\nIt would start the server on port 27017 by default.\r\n○\r\nTo start the client, a new terminal should be opened having the same directory as\r\nbefore. Then the following command would start the client and connect to the\r\n○\r\n○\r\n•\r\nhttps://riptutorial.com/ 3\r\nserver.\r\n$ ./mongo\r\nBy default it connects to the test database. If you see the line like connecting to:\r\ntest. Then you have successfully installed MongoDB. Congrats! Now, you can\r\ntest Hello World to be more confident.\r\nFor Windows:","metadata":{"loc":{"lines":{"from":826,"to":854}}}}],["38",{"pageContent":"test. Then you have successfully installed MongoDB. Congrats! Now, you can\r\ntest Hello World to be more confident.\r\nFor Windows:\r\nDownload the latest release here. Make sure that you are downloading the appropriate\r\nfile, specially check whether your operating system type is 32-bit or 64-bit.\r\n○\r\nThe downloaded binary file has extension exe. Run it. It will prompt an installation\r\nwizard.\r\n○\r\nClick Next.○\r\nAccept the licence agreement and click Next.○\r\nSelect Complete Installation.○\r\nClick on Install. It might prompt a window for asking administrator's permission. Click\r\nYes.\r\n○\r\nAfter installation click on Finish.○\r\nNow, the mongodb is installed on the path C:/Program Files/MongoDB/Server/3.2/bin.\r\nInstead of version 3.2, there could be some other version for your case. The path name\r\nwould be changed accordingly.\r\n○\r\nbin directory contain several binary file along with mongod and mongo. To run it from other\r\nfolder, you could add the path in system path. To do it:","metadata":{"loc":{"lines":{"from":854,"to":875}}}}],["39",{"pageContent":"would be changed accordingly.\r\n○\r\nbin directory contain several binary file along with mongod and mongo. To run it from other\r\nfolder, you could add the path in system path. To do it:\r\nRight click on My Computer and select Properties.○\r\nClick on Advanced system setting on the left pane.○\r\nClick on Environment Variables... under the Advanced tab.○\r\nSelect Path from System variables section and click on Edit....○\r\nBefore Windows 10, append a semi-colon and paste the path given above. From\r\nWindows 10, there is a New button to add new path.\r\n○\r\nClick OKs to save changes.○\r\n○\r\nNow, create a folder named data having a sub-folder named db where you want to run\r\nthe server.\r\n○\r\nStart command prompt from their. Either changing the path in cmd or clicking on Open\r\ncommand window here which would be visible after right clicking on the empty space\r\nof the folder GUI pressing the Shift and Ctrl key together.\r\n○\r\nWrite the command to start the server:○\r\n•\r\nhttps://riptutorial.com/ 4\r\n> mongod","metadata":{"loc":{"lines":{"from":875,"to":898}}}}],["40",{"pageContent":"of the folder GUI pressing the Shift and Ctrl key together.\r\n○\r\nWrite the command to start the server:○\r\n•\r\nhttps://riptutorial.com/ 4\r\n> mongod\r\nIt would start the server on port 27017 by default.\r\nOpen another command prompt and type the following to start client:\r\n> mongo\r\n○\r\nBy default it connects to the test database. If you see the line like connecting to: test.\r\nThen you have successfully installed MongoDB. Congrats! Now, you can test Hello\r\nWorld to be more confident.\r\n○\r\nFor Linux: Almost same as Mac OS except some equivalent command is needed.\r\nFor Debian-based distros (using apt-get):\r\nImport MongoDB Repository key.\r\n$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\r\ngpg: Total number processed: 1\\\r\ngpg: imported: 1 (RSA: 1)\r\n○\r\nAdd repository to package list on Ubuntu 16.04.\r\n$ echo \"deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2\r\nmultiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list\r\n○\r\non Ubuntu 14.04.","metadata":{"loc":{"lines":{"from":898,"to":923}}}}],["41",{"pageContent":"$ echo \"deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2\r\nmultiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list\r\n○\r\non Ubuntu 14.04.\r\n$ echo \"deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2\r\nmultiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list\r\n○\r\nUpdate package list.\r\n$ sudo apt-get update\r\n○\r\nInstall MongoDB.\r\n$ sudo apt-get install mongodb-org\r\n○\r\n○\r\nFor Red Hat based distros (using yum):\r\nuse a text editor which you prefer.\r\n$ vi /etc/yum.repos.d/mongodb-org-3.4.repo\r\n○\r\nPaste following text.\r\n[mongodb-org-3.4]\r\n○\r\n○\r\n•\r\nhttps://riptutorial.com/ 5\r\nname=MongoDB Repository\r\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-\r\norg/3.4/x86_64/\r\ngpgcheck=1\r\nenabled=1\r\ngpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc\r\nUpdate package list.\r\n$ sudo yum update\r\n○\r\nInstall MongoDB\r\n$ sudo yum install mongodb-org\r\n○\r\nHello World\r\nAfter installation process, the following lines should be entered in mongo shell (client terminal).","metadata":{"loc":{"lines":{"from":923,"to":960}}}}],["42",{"pageContent":"$ sudo yum update\r\n○\r\nInstall MongoDB\r\n$ sudo yum install mongodb-org\r\n○\r\nHello World\r\nAfter installation process, the following lines should be entered in mongo shell (client terminal).\r\n> db.world.insert({ \"speech\" : \"Hello World!\" });\r\n> cur = db.world.find();x=cur.next();print(x[\"speech\"]);\r\nHello World!\r\nExplanation:\r\nIn the first line, we have inserted a { key : value } paired document in the default database\r\ntest and in the collection named world.\r\n•\r\nIn the second line we retrieve the data we have just inserted. The retrieved data is kept in a\r\njavascript variable named cur. Then by the next() function, we retrieved the first and only\r\ndocument and kept it in another js variable named x. Then printed the value of the document\r\nproviding the key.\r\n•\r\nComplementary Terms\r\nSQL Terms MongoDB Terms\r\nDatabase Database\r\nTable Collection\r\nEntity / Row Document\r\nColumn Key / Field\r\nTable Join Embedded Documents\r\nPrimary Key Primary Key (Default key _id provided by mongodb itself)\r\nhttps://riptutorial.com/ 6","metadata":{"loc":{"lines":{"from":960,"to":987}}}}],["43",{"pageContent":"Table Collection\r\nEntity / Row Document\r\nColumn Key / Field\r\nTable Join Embedded Documents\r\nPrimary Key Primary Key (Default key _id provided by mongodb itself)\r\nhttps://riptutorial.com/ 6\r\nExecution of a JavaScript file in MongoDB\r\n./mongo localhost:27017/mydb myjsfile.js\r\nExplanation: This operation executes the myjsfile.js script in a mongo shell that connects to the\r\nmydb database on the mongod instance accessible via the localhost interface on port 27017.\r\nlocalhost:27017 is not mandatory as this is the default port mongodb uses.\r\nAlso, you can run a .js file from within mongo console.\r\n>load(\"myjsfile.js\")\r\nMaking the output of find readable in shell\r\nWe add three records to our collection test as:\r\n> db.test.insert({\"key\":\"value1\",\"key2\":\"Val2\",\"key3\":\"val3\"})\r\nWriteResult({ \"nInserted\" : 1 })\r\n> db.test.insert({\"key\":\"value2\",\"key2\":\"Val21\",\"key3\":\"val31\"})\r\nWriteResult({ \"nInserted\" : 1 })\r\n> db.test.insert({\"key\":\"value3\",\"key2\":\"Val22\",\"key3\":\"val33\"})\r\nWriteResult({ \"nInserted\" : 1 })","metadata":{"loc":{"lines":{"from":987,"to":1007}}}}],["44",{"pageContent":"> db.test.insert({\"key\":\"value2\",\"key2\":\"Val21\",\"key3\":\"val31\"})\r\nWriteResult({ \"nInserted\" : 1 })\r\n> db.test.insert({\"key\":\"value3\",\"key2\":\"Val22\",\"key3\":\"val33\"})\r\nWriteResult({ \"nInserted\" : 1 })\r\nIf we see them via find, they will look very ugly.\r\n> db.test.find()\r\n{ \"_id\" : ObjectId(\"5790c5cecae25b3d38c3c7ae\"), \"key\" : \"value1\", \"key2\" : \"Val2\r\n\", \"key3\" : \"val3\" }\r\n{ \"_id\" : ObjectId(\"5790c5d9cae25b3d38c3c7af\"), \"key\" : \"value2\", \"key2\" : \"Val2\r\n1\", \"key3\" : \"val31\" }\r\n{ \"_id\" : ObjectId(\"5790c5e9cae25b3d38c3c7b0\"), \"key\" : \"value3\", \"key2\" : \"Val2\r\n2\", \"key3\" : \"val33\" }\r\nTo work around this and make them readable, use the pretty() function.\r\n> db.test.find().pretty()\r\n{\r\n\"_id\" : ObjectId(\"5790c5cecae25b3d38c3c7ae\"),\r\n\"key\" : \"value1\",\r\n\"key2\" : \"Val2\",\r\n\"key3\" : \"val3\"\r\n}\r\n{\r\n\"_id\" : ObjectId(\"5790c5d9cae25b3d38c3c7af\"),\r\n\"key\" : \"value2\",\r\n\"key2\" : \"Val21\",\r\n\"key3\" : \"val31\"\r\n}\r\n{\r\n\"_id\" : ObjectId(\"5790c5e9cae25b3d38c3c7b0\"),\r\n\"key\" : \"value3\",\r\n\"key2\" : \"Val22\",\r\n\"key3\" : \"val33\"","metadata":{"loc":{"lines":{"from":1007,"to":1037}}}}],["45",{"pageContent":"\"key\" : \"value2\",\r\n\"key2\" : \"Val21\",\r\n\"key3\" : \"val31\"\r\n}\r\n{\r\n\"_id\" : ObjectId(\"5790c5e9cae25b3d38c3c7b0\"),\r\n\"key\" : \"value3\",\r\n\"key2\" : \"Val22\",\r\n\"key3\" : \"val33\"\r\nhttps://riptutorial.com/ 7\r\n}\r\n>\r\nBasic commands on mongo shell\r\nShow all available databases:\r\nshow dbs;\r\nSelect a particular database to access, e.g. mydb. This will create mydb if it does not already exist:\r\nuse mydb;\r\nShow all collections in the database (be sure to select one first, see above):\r\nshow collections;\r\nShow all functions that can be used with the database:\r\ndb.mydb.help();\r\nTo check your currently selected database, use the command db\r\n> db\r\nmydb\r\ndb.dropDatabase() command is used to drop a existing database.\r\ndb.dropDatabase()\r\nRead Getting started with MongoDB online: https://riptutorial.com/mongodb/topic/691/getting-\r\nstarted-with-mongodb\r\nhttps://riptutorial.com/ 8\r\nChapter 2: 2dsphere Index\r\nExamples\r\nCreate a 2dsphere Index\r\ndb.collection.createIndex() method is used to create a 2dsphere index. The blueprint of a 2dsphere\r\nindex :","metadata":{"loc":{"lines":{"from":1037,"to":1070}}}}],["46",{"pageContent":"https://riptutorial.com/ 8\r\nChapter 2: 2dsphere Index\r\nExamples\r\nCreate a 2dsphere Index\r\ndb.collection.createIndex() method is used to create a 2dsphere index. The blueprint of a 2dsphere\r\nindex :\r\ndb.collection.createIndex( { <location field> : \"2dsphere\" } )\r\nHere, the location field is the key and 2dsphere is the type of the index. In the following example\r\nwe are going to create a 2dsphre index in the places collection.\r\ndb.places.insert(\r\n{\r\nloc : { type: \"Point\", coordinates: [ -73.97, 40.77 ] },\r\nname: \"Central Park\",\r\ncategory : \"Parks\"\r\n})\r\nThe following operation will create 2dsphere index on the loc field of places collection.\r\ndb.places.createIndex( { loc : \"2dsphere\" } )\r\nRead 2dsphere Index online: https://riptutorial.com/mongodb/topic/6632/2dsphere-index\r\nhttps://riptutorial.com/ 9\r\nChapter 3: Aggregation\r\nIntroduction\r\nAggregations operations process data records and return computed results. Aggregation","metadata":{"loc":{"lines":{"from":1070,"to":1091}}}}],["47",{"pageContent":"https://riptutorial.com/ 9\r\nChapter 3: Aggregation\r\nIntroduction\r\nAggregations operations process data records and return computed results. Aggregation\r\noperations group values from multiple documents together, and can perform a variety of\r\noperations on the grouped data to return a single result. MongoDB provides three ways to perform\r\naggregation: the aggregation pipeline, the map-reduce function, and single purpose aggregation\r\nmethods.\r\nFrom Mongo manual https://docs.mongodb.com/manual/aggregation/\r\nSyntax\r\ndb.collection.aggregate(pipeline, options)•\r\nParameters\r\nParameter Details\r\npipeline array(A sequence of data aggregation operations or stages)\r\noptions document(optional, available only if pipeline present as an array)\r\nRemarks\r\nAggregation framework in MongoDB is used to achieve common GROUP BY functionality of SQL.\r\nConsider the following insertions in collection named transactions for every example.\r\n> db.transactions.insert({ cr_dr : \"D\", amount : 100, fee : 2});","metadata":{"loc":{"lines":{"from":1091,"to":1109}}}}],["48",{"pageContent":"Consider the following insertions in collection named transactions for every example.\r\n> db.transactions.insert({ cr_dr : \"D\", amount : 100, fee : 2});\r\n> db.transactions.insert({ cr_dr : \"C\", amount : 100, fee : 2});\r\n> db.transactions.insert({ cr_dr : \"C\", amount : 10, fee : 2});\r\n> db.transactions.insert({ cr_dr : \"D\", amount : 100, fee : 4});\r\n> db.transactions.insert({ cr_dr : \"D\", amount : 10, fee : 2});\r\n> db.transactions.insert({ cr_dr : \"C\", amount : 10, fee : 4});\r\n> db.transactions.insert({ cr_dr : \"D\", amount : 100, fee : 2});\r\nExamples\r\nCount\r\nHow do you get the number of Debit and Credit transactions? One way to do it is by using count()\r\nfunction as below.\r\nhttps://riptutorial.com/ 10\r\n> db.transactions.count({cr_dr : \"D\"});\r\nor\r\n> db.transactions.find({cr_dr : \"D\"}).length();\r\nBut what if you do not know the possible values of cr_dr upfront. Here Aggregation framework\r\ncomes to play. See the below Aggregate query.\r\n> db.transactions.aggregate(\r\n[\r\n{\r\n$group : {","metadata":{"loc":{"lines":{"from":1109,"to":1130}}}}],["49",{"pageContent":"But what if you do not know the possible values of cr_dr upfront. Here Aggregation framework\r\ncomes to play. See the below Aggregate query.\r\n> db.transactions.aggregate(\r\n[\r\n{\r\n$group : {\r\n_id : '$cr_dr', // group by type of transaction\r\n// Add 1 for each document to the count for this type of transaction\r\ncount : {$sum : 1}\r\n}\r\n}\r\n]\r\n);\r\nAnd the result is\r\n{\r\n\"_id\" : \"C\",\r\n\"count\" : 3\r\n}\r\n{\r\n\"_id\" : \"D\",\r\n\"count\" : 5\r\n}\r\nSum\r\nHow to get the summation of amount? See the below aggregate query.\r\n> db.transactions.aggregate(\r\n[\r\n{\r\n$group : {\r\n_id : '$cr_dr',\r\ncount : {$sum : 1}, //counts the number\r\ntotalAmount : {$sum : '$amount'} //sums the amount\r\n}\r\n}\r\n]\r\n);\r\nAnd the result is\r\n{\r\n\"_id\" : \"C\",\r\n\"count\" : 3.0,\r\nhttps://riptutorial.com/ 11\r\n\"totalAmount\" : 120.0\r\n}\r\n{\r\n\"_id\" : \"D\",\r\n\"count\" : 5.0,\r\n\"totalAmount\" : 410.0\r\n}\r\nAnother version that sums amount and fee.\r\n> db.transactions.aggregate(\r\n[\r\n{\r\n$group : {\r\n_id : '$cr_dr',\r\ncount : {$sum : 1},\r\ntotalAmount : {$sum : { $sum : ['$amount', '$fee']}}\r\n}\r\n}\r\n]\r\n);\r\nAnd the result is\r\n{","metadata":{"loc":{"lines":{"from":1130,"to":1190}}}}],["50",{"pageContent":"> db.transactions.aggregate(\r\n[\r\n{\r\n$group : {\r\n_id : '$cr_dr',\r\ncount : {$sum : 1},\r\ntotalAmount : {$sum : { $sum : ['$amount', '$fee']}}\r\n}\r\n}\r\n]\r\n);\r\nAnd the result is\r\n{\r\n\"_id\" : \"C\",\r\n\"count\" : 3.0,\r\n\"totalAmount\" : 128.0\r\n}\r\n{\r\n\"_id\" : \"D\",\r\n\"count\" : 5.0,\r\n\"totalAmount\" : 422.0\r\n}\r\nAverage\r\nHow to get the average amount of debit and credit transactions?\r\n> db.transactions.aggregate(\r\n[\r\n{\r\n$group : {\r\n_id : '$cr_dr', // group by type of transaction (debit or credit)\r\ncount : {$sum : 1}, // number of transaction for each type\r\ntotalAmount : {$sum : { $sum : ['$amount', '$fee']}}, // sum\r\naverageAmount : {$avg : { $sum : ['$amount', '$fee']}} // average\r\n}\r\n}\r\n]\r\n)\r\nThe result is\r\n{\r\nhttps://riptutorial.com/ 12\r\n\"_id\" : \"C\", // Amounts for credit transactions\r\n\"count\" : 3.0,\r\n\"totalAmount\" : 128.0,\r\n\"averageAmount\" : 40.0\r\n}\r\n{\r\n\"_id\" : \"D\", // Amounts for debit transactions\r\n\"count\" : 5.0,\r\n\"totalAmount\" : 422.0,\r\n\"averageAmount\" : 82.0\r\n}\r\nOperations with arrays.","metadata":{"loc":{"lines":{"from":1190,"to":1240}}}}],["51",{"pageContent":"\"count\" : 3.0,\r\n\"totalAmount\" : 128.0,\r\n\"averageAmount\" : 40.0\r\n}\r\n{\r\n\"_id\" : \"D\", // Amounts for debit transactions\r\n\"count\" : 5.0,\r\n\"totalAmount\" : 422.0,\r\n\"averageAmount\" : 82.0\r\n}\r\nOperations with arrays.\r\nWhen you want to work with the data entries in arrays you first need to unwind the array. The\r\nunwind operation creates a document for each entry in the array. When you have lot's of\r\ndocuments with large arrays you will see an explosion in number of documents.\r\n{ \"_id\" : 1, \"item\" : \"myItem1\", sizes: [ \"S\", \"M\", \"L\"] }\r\n{ \"_id\" : 2, \"item\" : \"myItem2\", sizes: [ \"XS\", \"M\", \"XL\"] }\r\ndb.inventory.aggregate( [ { $unwind : \"$sizes\" }] )\r\nAn important notice is that when a document doesn't contain the array it will be lost. From mongo\r\n3.2 and up there are is an unwind option \"preserveNullAndEmptyArrays\" added. This option\r\nmakes sure the document is preserved when the array is missing.\r\n{ \"_id\" : 1, \"item\" : \"myItem1\", sizes: [ \"S\", \"M\", \"L\"] }","metadata":{"loc":{"lines":{"from":1240,"to":1260}}}}],["52",{"pageContent":"makes sure the document is preserved when the array is missing.\r\n{ \"_id\" : 1, \"item\" : \"myItem1\", sizes: [ \"S\", \"M\", \"L\"] }\r\n{ \"_id\" : 2, \"item\" : \"myItem2\", sizes: [ \"XS\", \"M\", \"XL\"] }\r\n{ \"_id\" : 3, \"item\" : \"myItem3\" }\r\ndb.inventory.aggregate( [ { $unwind : { path: \"$sizes\", includeArrayIndex: \"arrayIndex\" } }] )\r\nMatch\r\nHow to write a query to get all departments where average age of employees making less than or\r\n$70000 is greather than or equal to 35?\r\nIn order to that we need to write a query to match employees that have a salary that is less than or\r\nequal to $70000. Then add the aggregate stage to group the employees by the department. Then\r\nadd an accumulator with a field named e.g. average_age to find the average age per department\r\nusing the $avg accumulator and below the existing $match and $group aggregates add another\r\n$match aggregate so that we're only retrieving results with an average_age that is greather than\r\nor equal to 35.\r\ndb.employees.aggregate([","metadata":{"loc":{"lines":{"from":1260,"to":1274}}}}],["53",{"pageContent":"$match aggregate so that we're only retrieving results with an average_age that is greather than\r\nor equal to 35.\r\ndb.employees.aggregate([\r\n{\"$match\": {\"salary\": {\"$lte\": 70000}}},\r\n{\"$group\": {\"_id\": \"$dept\",\r\n\"average_age\": {\"$avg\": \"$age\"}\r\n}\r\n},\r\n{\"$match\": {\"average_age\": {\"$gte\": 35}}}\r\nhttps://riptutorial.com/ 13\r\n])\r\nThe result is:\r\n{\r\n\"_id\": \"IT\",\r\n\"average_age\": 31\r\n}\r\n{\r\n\"_id\": \"Customer Service\",\r\n\"average_age\": 34.5\r\n}\r\n{\r\n\"_id\": \"Finance\",\r\n\"average_age\": 32.5\r\n}\r\nRemove docs that have a duplicate field in a collection (dedupe)\r\nNote that the allowDiskUse: true option is optional but will help mitigate out of memory issues as\r\nthis aggregation can be a memory intensive operation if your collection size is large - so i\r\nrecommend to always use it.\r\nvar duplicates = [];\r\ndb.transactions.aggregate([\r\n{ $group: {\r\n_id: { cr_dr: \"$cr_dr\"},\r\ndups: { \"$addToSet\": \"$_id\" },\r\ncount: { \"$sum\": 1 }\r\n}\r\n},\r\n{ $match: {\r\ncount: { \"$gt\": 1 }\r\n}}\r\n],allowDiskUse: true}\r\n)\r\n.result\r\n.forEach(function(doc) {\r\ndoc.dups.shift();","metadata":{"loc":{"lines":{"from":1274,"to":1317}}}}],["54",{"pageContent":"_id: { cr_dr: \"$cr_dr\"},\r\ndups: { \"$addToSet\": \"$_id\" },\r\ncount: { \"$sum\": 1 }\r\n}\r\n},\r\n{ $match: {\r\ncount: { \"$gt\": 1 }\r\n}}\r\n],allowDiskUse: true}\r\n)\r\n.result\r\n.forEach(function(doc) {\r\ndoc.dups.shift();\r\ndoc.dups.forEach( function(dupId){\r\nduplicates.push(dupId);\r\n}\r\n)\r\n})\r\n// printjson(duplicates);\r\n// Remove all duplicates in one go\r\ndb.transactions.remove({_id:{$in:duplicates}})\r\nRead Aggregation online: https://riptutorial.com/mongodb/topic/3852/aggregation\r\nhttps://riptutorial.com/ 14\r\nChapter 4: Authentication Mechanisms in\r\nMongoDB\r\nIntroduction\r\nAuthentication is the process of verifying the identity of a client. When access control, i.e.\r\nauthorization, is enabled, MongoDB requires all clients to authenticate themselves in order to\r\ndetermine their access.\r\nMongoDB supports a number of authentication mechanisms that clients can use to verify their\r\nidentity. These mechanisms allow MongoDB to integrate into your existing authentication system.\r\nExamples\r\nAuthentication Mechanisms","metadata":{"loc":{"lines":{"from":1317,"to":1349}}}}],["55",{"pageContent":"identity. These mechanisms allow MongoDB to integrate into your existing authentication system.\r\nExamples\r\nAuthentication Mechanisms\r\nMongoDB supports multiple authentication mechanisms.\r\nClient and User Authentication Mechanisms\r\nSCRAM-SHA-1•\r\nX.509 Certificate Authentication•\r\nMongoDB Challenge and Response (MONGODB-CR)•\r\nLDAP proxy authentication, and•\r\nKerberos authentication•\r\nInternal Authentication Mechanisms\r\nKeyfile•\r\nX.509•\r\nRead Authentication Mechanisms in MongoDB online:\r\nhttps://riptutorial.com/mongodb/topic/8113/authentication-mechanisms-in-mongodb\r\nhttps://riptutorial.com/ 15\r\nChapter 5: Backing up and Restoring Data\r\nExamples\r\nmongoimport with JSON\r\nSample zipcode dataset in zipcodes.json stored in c:\\Users\\yc03ak1\\Desktop\\zips.json\r\n{ \"_id\" : \"01001\", \"city\" : \"AGAWAM\", \"loc\" : [ -72.622739, 42.070206 ], \"pop\" : 15338,\r\n\"state\" : \"MA\" }\r\n{ \"_id\" : \"01002\", \"city\" : \"CUSHMAN\", \"loc\" : [ -72.51564999999999, 42.377017 ], \"pop\" :\r\n36963, \"state\" : \"MA\" }","metadata":{"loc":{"lines":{"from":1349,"to":1372}}}}],["56",{"pageContent":"\"state\" : \"MA\" }\r\n{ \"_id\" : \"01002\", \"city\" : \"CUSHMAN\", \"loc\" : [ -72.51564999999999, 42.377017 ], \"pop\" :\r\n36963, \"state\" : \"MA\" }\r\n{ \"_id\" : \"01005\", \"city\" : \"BARRE\", \"loc\" : [ -72.10835400000001, 42.409698 ], \"pop\" : 4546,\r\n\"state\" : \"MA\" }\r\n{ \"_id\" : \"01007\", \"city\" : \"BELCHERTOWN\", \"loc\" : [ -72.41095300000001, 42.275103 ], \"pop\" :\r\n10579, \"state\" : \"MA\" }\r\n{ \"_id\" : \"01008\", \"city\" : \"BLANDFORD\", \"loc\" : [ -72.936114, 42.182949 ], \"pop\" : 1240,\r\n\"state\" : \"MA\" }\r\n{ \"_id\" : \"01010\", \"city\" : \"BRIMFIELD\", \"loc\" : [ -72.188455, 42.116543 ], \"pop\" : 3706,\r\n\"state\" : \"MA\" }\r\n{ \"_id\" : \"01011\", \"city\" : \"CHESTER\", \"loc\" : [ -72.988761, 42.279421 ], \"pop\" : 1688,\r\n\"state\" : \"MA\" }\r\nto import this data-set to the database named \"test\" and collection named \"zips\"\r\nC:\\Users\\yc03ak1>mongoimport --db test --collection \"zips\" --drop --type json --host\r\n\"localhost:47019\" --file \"c:\\Users\\yc03ak1\\Desktop\\zips.json\"\r\n--db : name of the database where data is to be imported to•","metadata":{"loc":{"lines":{"from":1372,"to":1388}}}}],["57",{"pageContent":"\"localhost:47019\" --file \"c:\\Users\\yc03ak1\\Desktop\\zips.json\"\r\n--db : name of the database where data is to be imported to•\r\n--collection: name of the collection in the database where data is to be improted•\r\n--drop : drops the collection first before importing•\r\n--type : document type which needs to be imported. default JSON•\r\n--host : mongodb host and port on which data is to be imported.•\r\n--file : path where the json file is•\r\noutput :\r\n2016-08-10T20:10:50.159-0700 connected to: localhost:47019\r\n2016-08-10T20:10:50.163-0700 dropping: test.zips\r\n2016-08-10T20:10:53.155-0700 [################........] test.zips 2.1 MB/3.0 MB (68.5%)\r\n2016-08-10T20:10:56.150-0700 [########################] test.zips 3.0 MB/3.0 MB (100.0%)\r\n2016-08-10T20:10:57.819-0700 [########################] test.zips 3.0 MB/3.0 MB (100.0%)\r\n2016-08-10T20:10:57.821-0700 imported 29353 documents\r\nmongoimport with CSV\r\nSample test dataset CSV file stored at the location c:\\Users\\yc03ak1\\Desktop\\testing.csv\r\n_id city loc pop state","metadata":{"loc":{"lines":{"from":1388,"to":1404}}}}],["58",{"pageContent":"2016-08-10T20:10:57.821-0700 imported 29353 documents\r\nmongoimport with CSV\r\nSample test dataset CSV file stored at the location c:\\Users\\yc03ak1\\Desktop\\testing.csv\r\n_id city loc pop state\r\nhttps://riptutorial.com/ 16\r\n1 A [10.0, 20.0] 2222 PQE\r\n2 B [10.1, 20.1] 22122 RW\r\n3 C [10.2, 20.0] 255222 RWE\r\n4 D [10.3, 20.3] 226622 SFDS\r\n5 E [10.4, 20.0] 222122 FDS\r\nto import this data-set to the database named \"test\" and collection named \"sample\"\r\nC:\\Users\\yc03ak1>mongoimport --db test --collection \"sample\" --drop --type csv --headerline --\r\nhost \"localhost:47019\" --file \"c:\\Users\\yc03ak1\\Desktop\\testing.csv\"\r\n--headerline : use the first line of the csv file as the fields for the json document•\r\noutput :\r\n2016-08-10T20:25:48.572-0700 connected to: localhost:47019\r\n2016-08-10T20:25:48.576-0700 dropping: test.sample\r\n2016-08-10T20:25:49.109-0700 imported 5 documents\r\nOR\r\nC:\\Users\\yc03ak1>mongoimport --db test --collection \"sample\" --drop --type csv --fields","metadata":{"loc":{"lines":{"from":1404,"to":1423}}}}],["59",{"pageContent":"2016-08-10T20:25:48.576-0700 dropping: test.sample\r\n2016-08-10T20:25:49.109-0700 imported 5 documents\r\nOR\r\nC:\\Users\\yc03ak1>mongoimport --db test --collection \"sample\" --drop --type csv --fields\r\n_id,city,loc,pop,state --host \"localhost:47019\" --file \"c:\\Users\\yc03ak1\\Desktop\\testing.csv\"\r\n--fields : comma seperated list of fields which needs to be imported in the json document.\r\nOutput:\r\n•\r\n2016-08-10T20:26:48.978-0700 connected to: localhost:47019\r\n2016-08-10T20:26:48.982-0700 dropping: test.sample\r\n2016-08-10T20:26:49.611-0700 imported 6 documents\r\nRead Backing up and Restoring Data online: https://riptutorial.com/mongodb/topic/6290/backing-\r\nup-and-restoring-data\r\nhttps://riptutorial.com/ 17\r\nChapter 6: Backing up and Restoring Data\r\nExamples\r\nBasic mongodump of local default mongod instance\r\nmongodump --db mydb --gzip --out \"mydb.dump.$(date +%F_%R)\"\r\nThis command will dump a bson gzipped archive of your local mongod 'mydb' database to the\r\n'mydb.dump.{timestamp}' directory","metadata":{"loc":{"lines":{"from":1423,"to":1442}}}}],["60",{"pageContent":"mongodump --db mydb --gzip --out \"mydb.dump.$(date +%F_%R)\"\r\nThis command will dump a bson gzipped archive of your local mongod 'mydb' database to the\r\n'mydb.dump.{timestamp}' directory\r\nBasic mongorestore of local default mongod dump\r\nmongorestore --db mydb mydb.dump.2016-08-27_12:44/mydb --drop --gzip\r\nThis command will first drop your current 'mydb' database and then restore your gzipped bson\r\ndump from the 'mydb mydb.dump.2016-08-27_12:44/mydb' archive dump file.\r\nRead Backing up and Restoring Data online: https://riptutorial.com/mongodb/topic/6494/backing-\r\nup-and-restoring-data\r\nhttps://riptutorial.com/ 18\r\nChapter 7: Bulk Operations\r\nRemarks\r\nConstructing a list of write operations to perform in bulk for a single collection.\r\nExamples\r\nConverting a field to another type and updating the entire collection in Bulk\r\nUsually the case when one wants to change a field type to another, for instance the original\r\ncollection may have \"numerical\" or \"date\" fields saved as strings:\r\n{\r\n\"name\": \"Alice\",","metadata":{"loc":{"lines":{"from":1442,"to":1460}}}}],["61",{"pageContent":"Usually the case when one wants to change a field type to another, for instance the original\r\ncollection may have \"numerical\" or \"date\" fields saved as strings:\r\n{\r\n\"name\": \"Alice\",\r\n\"salary\": \"57871\",\r\n\"dob\": \"1986-08-21\"\r\n},\r\n{\r\n\"name\": \"Bob\",\r\n\"salary\": \"48974\",\r\n\"dob\": \"1990-11-04\"\r\n}\r\nThe objective would be to update a humongous collection like the above to\r\n{\r\n\"name\": \"Alice\",\r\n\"salary\": 57871,\r\n\"dob\": ISODate(\"1986-08-21T00:00:00.000Z\")\r\n},\r\n{\r\n\"name\": \"Bob\",\r\n\"salary\": 48974,\r\n\"dob\": ISODate(\"1990-11-04T00:00:00.000Z\")\r\n}\r\nFor relatively small data, one can achieve the above by iterating the collection using a snapshot\r\nwith the cursor's forEach() method and updating each document as follows:\r\ndb.test.find({\r\n\"salary\": { \"$exists\": true, \"$type\": 2 },\r\n\"dob\": { \"$exists\": true, \"$type\": 2 }\r\n}).snapshot().forEach(function(doc){\r\nvar newSalary = parseInt(doc.salary),\r\nnewDob = new ISODate(doc.dob);\r\ndb.test.updateOne(\r\n{ \"_id\": doc._id },\r\n{ \"$set\": { \"salary\": newSalary, \"dob\": newDob } }\r\n);\r\n});","metadata":{"loc":{"lines":{"from":1460,"to":1495}}}}],["62",{"pageContent":"var newSalary = parseInt(doc.salary),\r\nnewDob = new ISODate(doc.dob);\r\ndb.test.updateOne(\r\n{ \"_id\": doc._id },\r\n{ \"$set\": { \"salary\": newSalary, \"dob\": newDob } }\r\n);\r\n});\r\nhttps://riptutorial.com/ 19\r\nWhilst this is optimal for small collections, performance with large collections is greatly reduced\r\nsince looping through a large dataset and sending each update operation per request to the server\r\nincurs a computational penalty.\r\nThe Bulk() API comes to the rescue and greatly improves performance since write operations are\r\nsent to the server only once in bulk. Efficiency is achieved since the method does not send every\r\nwrite request to the server (as with the current update statement within the forEach() loop) but just\r\nonce in every 1000 requests, thus making updates more efficient and quicker than currently is.\r\nUsing the same concept above with the forEach() loop to create the batches, we can update the","metadata":{"loc":{"lines":{"from":1495,"to":1510}}}}],["63",{"pageContent":"once in every 1000 requests, thus making updates more efficient and quicker than currently is.\r\nUsing the same concept above with the forEach() loop to create the batches, we can update the\r\ncollection in bulk as follows. In this demonstration the Bulk() API available in MongoDB versions >=\r\n2.6 and < 3.2 uses the initializeUnorderedBulkOp() method to execute in parallel, as well as in a\r\nnondeterministic order, the write operations in the batches.\r\nIt updates all the documents in the clients collection by changing the salary and dob fields to\r\nnumerical and datetime values respectively:\r\nvar bulk = db.test.initializeUnorderedBulkOp(),\r\ncounter = 0; // counter to keep track of the batch update size\r\ndb.test.find({\r\n\"salary\": { \"$exists\": true, \"$type\": 2 },\r\n\"dob\": { \"$exists\": true, \"$type\": 2 }\r\n}).snapshot().forEach(function(doc){\r\nvar newSalary = parseInt(doc.salary),\r\nnewDob = new ISODate(doc.dob);\r\nbulk.find({ \"_id\": doc._id }).updateOne({\r\n\"$set\": { \"salary\": newSalary, \"dob\": newDob }\r\n});","metadata":{"loc":{"lines":{"from":1510,"to":1527}}}}],["64",{"pageContent":"}).snapshot().forEach(function(doc){\r\nvar newSalary = parseInt(doc.salary),\r\nnewDob = new ISODate(doc.dob);\r\nbulk.find({ \"_id\": doc._id }).updateOne({\r\n\"$set\": { \"salary\": newSalary, \"dob\": newDob }\r\n});\r\ncounter++; // increment counter\r\nif (counter % 1000 == 0) {\r\nbulk.execute(); // Execute per 1000 operations and re-initialize every 1000 update\r\nstatements\r\nbulk = db.test.initializeUnorderedBulkOp();\r\n}\r\n});\r\nThe next example applies to the new MongoDB version 3.2 which has since deprecated the Bulk()\r\nAPI and provided a newer set of apis using bulkWrite().\r\nIt uses the same cursors as above but creates the arrays with the bulk operations using the same\r\nforEach() cursor method to push each bulk write document to the array. Because write commands\r\ncan accept no more than 1000 operations, there's need to group operations to have at most 1000\r\noperations and re-intialise the array when the loop hits the 1000 iteration:\r\nvar cursor = db.test.find({\r\n\"salary\": { \"$exists\": true, \"$type\": 2 },","metadata":{"loc":{"lines":{"from":1527,"to":1547}}}}],["65",{"pageContent":"operations and re-intialise the array when the loop hits the 1000 iteration:\r\nvar cursor = db.test.find({\r\n\"salary\": { \"$exists\": true, \"$type\": 2 },\r\n\"dob\": { \"$exists\": true, \"$type\": 2 }\r\n}),\r\nbulkUpdateOps = [];\r\nhttps://riptutorial.com/ 20\r\ncursor.snapshot().forEach(function(doc){\r\nvar newSalary = parseInt(doc.salary),\r\nnewDob = new ISODate(doc.dob);\r\nbulkUpdateOps.push({\r\n\"updateOne\": {\r\n\"filter\": { \"_id\": doc._id },\r\n\"update\": { \"$set\": { \"salary\": newSalary, \"dob\": newDob } }\r\n}\r\n});\r\nif (bulkUpdateOps.length === 1000) {\r\ndb.test.bulkWrite(bulkUpdateOps);\r\nbulkUpdateOps = [];\r\n}\r\n});\r\nif (bulkUpdateOps.length > 0) { db.test.bulkWrite(bulkUpdateOps); }\r\nRead Bulk Operations online: https://riptutorial.com/mongodb/topic/6211/bulk-operations\r\nhttps://riptutorial.com/ 21\r\nChapter 8: Collections\r\nRemarks\r\nCreate Database\r\nExamples\r\nCreate a Collection\r\nFirst Select Or Create a database.\r\n> use mydb\r\nswitched to db mydb\r\nUsing db.createCollection(\"yourCollectionName\") method you can explicitly create Collection.","metadata":{"loc":{"lines":{"from":1547,"to":1579}}}}],["66",{"pageContent":"Examples\r\nCreate a Collection\r\nFirst Select Or Create a database.\r\n> use mydb\r\nswitched to db mydb\r\nUsing db.createCollection(\"yourCollectionName\") method you can explicitly create Collection.\r\n> db.createCollection(\"newCollection1\")\r\n{ \"ok\" : 1 }\r\nUsing show collections command see all collections in the database.\r\n> show collections\r\nnewCollection1\r\nsystem.indexes\r\n>\r\nThe db.createCollection() method has the following parameters:\r\nParameter Type Description\r\nname string The name of the collection to create.\r\noptions document Optional. Configuration options for creating a capped collection or\r\nfor preallocating space in a new collection.\r\nThe fllowing example shows the syntax of createCollection() method with few important options\r\n>db.createCollection(\"newCollection4\", {capped :true, autoIndexId : true, size : 6142800, max\r\n: 10000})\r\n{ \"ok\" : 1 }\r\nBoth the db.collection.insert() and the db.collection.createIndex() operations create their\r\nrespective collection if they do not already exist.","metadata":{"loc":{"lines":{"from":1579,"to":1602}}}}],["67",{"pageContent":": 10000})\r\n{ \"ok\" : 1 }\r\nBoth the db.collection.insert() and the db.collection.createIndex() operations create their\r\nrespective collection if they do not already exist.\r\n> db.newCollection2.insert({name : \"XXX\"})\r\nhttps://riptutorial.com/ 22\r\n> db.newCollection3.createIndex({accountNo : 1})\r\nNow, Show All the collections using show collections command\r\n> show collections\r\nnewCollection1\r\nnewCollection2\r\nnewCollection3\r\nnewCollection4\r\nsystem.indexes\r\nIf you want to see the inserted document, use the find() command.\r\n> db.newCollection2.find()\r\n{ \"_id\" : ObjectId(\"58f26876cabafaeb509e9c1f\"), \"name\" : \"XXX\" }\r\nDrop Collection\r\nMongoDB's db.collection.drop() is used to drop a collection from the database.\r\nFirst, check the available collections into your database mydb.\r\n> use mydb\r\nswitched to db mydb\r\n> show collections\r\nnewCollection1\r\nnewCollection2\r\nnewCollection3\r\nsystem.indexes\r\nNow drop the collection with the name newCollection1.\r\n> db.newCollection1.drop()\r\ntrue","metadata":{"loc":{"lines":{"from":1602,"to":1631}}}}],["68",{"pageContent":"> use mydb\r\nswitched to db mydb\r\n> show collections\r\nnewCollection1\r\nnewCollection2\r\nnewCollection3\r\nsystem.indexes\r\nNow drop the collection with the name newCollection1.\r\n> db.newCollection1.drop()\r\ntrue\r\nNote: If the collection droped successfully then the method will return true otherwise it will return\r\nfalse.\r\nAgain check the list of collections into database.\r\n> show collections\r\nnewCollection2\r\nnewCollection3\r\nsystem.indexes\r\nReference: MongoDB drop() Method.\r\nRead Collections online: https://riptutorial.com/mongodb/topic/9732/collections\r\nhttps://riptutorial.com/ 23\r\nChapter 9: Configuration\r\nParameters\r\nParameter Default\r\nsystemLog.verbosity 0\r\nsystemLog.quiet false\r\nsystemLog.traceAllExceptions false\r\nsystemLog.syslogFacility user\r\nsystemLog.path -\r\nsystemLog.logAppend false\r\nsystemLog.logRotate rename\r\nsystemLog.destination stdout\r\nsystemLog.timeStampFormat iso8601-local\r\nsystemLog.component.accessControl.verbosity 0\r\nsystemLog.component.command.verbosity 0\r\nsystemLog.component.control.verbosity 0","metadata":{"loc":{"lines":{"from":1631,"to":1665}}}}],["69",{"pageContent":"systemLog.destination stdout\r\nsystemLog.timeStampFormat iso8601-local\r\nsystemLog.component.accessControl.verbosity 0\r\nsystemLog.component.command.verbosity 0\r\nsystemLog.component.control.verbosity 0\r\nsystemLog.component.ftdc.verbosity 0\r\nsystemLog.component.geo.verbosity 0\r\nsystemLog.component.index.verbosity 0\r\nsystemLog.component.network.verbo 0\r\nsystemLog.component.query.verbosity 0\r\nsystemLog.component.replication.verbosity 0\r\nsystemLog.component.sharding.verbosity 0\r\nsystemLog.component.storage.verbosity 0\r\nsystemLog.component.storage.journal.verbosity 0\r\nsystemLog.component.write.verbosity 0\r\nhttps://riptutorial.com/ 24\r\nParameter Default\r\nprocessManagement.fork false\r\nprocessManagement.pidFilePath none\r\nnet.port 27017\r\nnet.bindIp 0.0.0.0\r\nnet.maxIncomingConnections 65536\r\nnet.wireObjectCheck true\r\nnet.ipv6 false\r\nnet.unixDomainSocket.enabled true\r\nnet.unixDomainSocket.pathPrefix /tmp\r\nnet.unixDomainSocket.filePermissions 0700\r\nnet.http.enabled false\r\nnet.http.JSONPEnabled false","metadata":{"loc":{"lines":{"from":1665,"to":1693}}}}],["70",{"pageContent":"net.ipv6 false\r\nnet.unixDomainSocket.enabled true\r\nnet.unixDomainSocket.pathPrefix /tmp\r\nnet.unixDomainSocket.filePermissions 0700\r\nnet.http.enabled false\r\nnet.http.JSONPEnabled false\r\nnet.http.RESTInterfaceEnabled false\r\nnet.ssl.sslOnNormalPorts false\r\nnet.ssl.mode disabled\r\nnet.ssl.PEMKeyFile none\r\nnet.ssl.PEMKeyPassword none\r\nnet.ssl.clusterFile none\r\nnet.ssl.clusterPassword none\r\nnet.ssl.CAFile none\r\nnet.ssl.CRLFile none\r\nnet.ssl.allowConnectionsWithoutCertificates false\r\nnet.ssl.allowInvalidCertificates false\r\nnet.ssl.allowInvalidHostnames false\r\nnet.ssl.disabledProtocols none\r\nhttps://riptutorial.com/ 25\r\nParameter Default\r\nnet.ssl.FIPSMode false\r\nExamples\r\nStarting mongo with a specific config file\r\nUsing the --config flag.\r\n$ /bin/mongod --config /etc/mongod.conf\r\n$ /bin/mongos --config /etc/mongos.conf\r\nNote that -f is the shorter synonym for --config.\r\nRead Configuration online: https://riptutorial.com/mongodb/topic/5985/configuration\r\nhttps://riptutorial.com/ 26\r\nChapter 10: CRUD Operation\r\nSyntax","metadata":{"loc":{"lines":{"from":1693,"to":1724}}}}],["71",{"pageContent":"Note that -f is the shorter synonym for --config.\r\nRead Configuration online: https://riptutorial.com/mongodb/topic/5985/configuration\r\nhttps://riptutorial.com/ 26\r\nChapter 10: CRUD Operation\r\nSyntax\r\ninsert(document or array of documents)•\r\ninsertOne( 'document', { writeConcern: 'document' } )•\r\ninsertMany( { [ document 1 , document 2, ... ] }, { writeConcern: document, ordered: boolean\r\n} )\r\n•\r\nfind(query, projection)•\r\nfindOne(query, projection)•\r\nupdate(query, update)•\r\nupdateOne( query, update, { upsert: boolean, writeConcern: document } )•\r\nupdateMany( query, update, { upsert: boolean, writeConcern: document } )•\r\nreplaceOne( query, replacement, { upsert: boolean, writeConcern: document } )•\r\nremove(query, justOne)•\r\nfindAndModify(query, sort, update, options[optional])•\r\nRemarks\r\nUpdating and Deleting a document should be done carefully. Since operation may affect for\r\nmultiple documents.\r\nExamples\r\nCreate\r\ndb.people.insert({name: 'Tom', age: 28});\r\nOr\r\ndb.people.save({name: 'Tom', age: 28});","metadata":{"loc":{"lines":{"from":1724,"to":1749}}}}],["72",{"pageContent":"multiple documents.\r\nExamples\r\nCreate\r\ndb.people.insert({name: 'Tom', age: 28});\r\nOr\r\ndb.people.save({name: 'Tom', age: 28});\r\nThe difference with save is that if the passed document contains an _id field, if a document already\r\nexists with that _id it will be updated instead of being added as new.\r\nTwo new methods to insert documents into a collection, in MongoDB 3.2.x:-\r\nUse insertOne to insert only one record:-\r\ndb.people.insertOne({name: 'Tom', age: 28});\r\nUse insertMany to insert multiple records:-\r\ndb.people.insertMany([{name: 'Tom', age: 28},{name: 'John', age: 25}, {name: 'Kathy', age:\r\nhttps://riptutorial.com/ 27\r\n23}])\r\nNote that insert is highlighted as deprecated in every official language driver since version 3.0.\r\nThe full distinction being that the shell methods actually lagged behind the other drivers in\r\nimplementing the method. The same thing applies for all other CRUD methods\r\nUpdate\r\nUpdate the entire object:\r\ndb.people.update({name: 'Tom'}, {age: 29, name: 'Tom'})","metadata":{"loc":{"lines":{"from":1749,"to":1769}}}}],["73",{"pageContent":"implementing the method. The same thing applies for all other CRUD methods\r\nUpdate\r\nUpdate the entire object:\r\ndb.people.update({name: 'Tom'}, {age: 29, name: 'Tom'})\r\n// New in MongoDB 3.2\r\ndb.people.updateOne({name: 'Tom'},{age: 29, name: 'Tom'}) //Will replace only first matching\r\ndocument.\r\ndb.people.updateMany({name: 'Tom'},{age: 29, name: 'Tom'}) //Will replace all matching\r\ndocuments.\r\nOr just update a single field of a document. In this case age:\r\ndb.people.update({name: 'Tom'}, {$set: {age: 29}})\r\nYou can also update multiple documents simultaneously by adding a third parameter. This query\r\nwill update all documents where the name equals Tom:\r\ndb.people.update({name: 'Tom'}, {$set: {age: 29}}, {multi: true})\r\n// New in MongoDB 3.2\r\ndb.people.updateOne({name: 'Tom'},{$set:{age: 30}) //Will update only first matching document.\r\ndb.people.updateMany({name: 'Tom'},{$set:{age: 30}}) //Will update all matching documents.","metadata":{"loc":{"lines":{"from":1769,"to":1785}}}}],["74",{"pageContent":"db.people.updateOne({name: 'Tom'},{$set:{age: 30}) //Will update only first matching document.\r\ndb.people.updateMany({name: 'Tom'},{$set:{age: 30}}) //Will update all matching documents.\r\nIf a new field is coming for update, that field will be added to the document.\r\ndb.people.updateMany({name: 'Tom'},{$set:{age: 30, salary:50000}})// Document will have\r\n`salary` field as well.\r\nIf a document is needed to be replaced,\r\ndb.collection.replaceOne({name:'Tom'}, {name:'Lakmal',age:25,address:'Sri Lanka'})\r\ncan be used.\r\nNote: Fields you use to identify the object will be saved in the updated document. Field that are\r\nnot defined in the update section will be removed from the document.\r\nDelete\r\nDeletes all documents matching the query parameter:\r\nhttps://riptutorial.com/ 28\r\n// New in MongoDB 3.2\r\ndb.people.deleteMany({name: 'Tom'})\r\n// All versions\r\ndb.people.remove({name: 'Tom'})\r\nOr just one\r\n// New in MongoDB 3.2\r\ndb.people.deleteOne({name: 'Tom'})\r\n// All versions\r\ndb.people.remove({name: 'Tom'}, true)","metadata":{"loc":{"lines":{"from":1785,"to":1806}}}}],["75",{"pageContent":"// All versions\r\ndb.people.remove({name: 'Tom'})\r\nOr just one\r\n// New in MongoDB 3.2\r\ndb.people.deleteOne({name: 'Tom'})\r\n// All versions\r\ndb.people.remove({name: 'Tom'}, true)\r\nMongoDB's remove() method. If you execute this command without any argument or without empty\r\nargument it will remove all documents from the collection.\r\ndb.people.remove();\r\nor\r\ndb.people.remove({});\r\nRead\r\nQuery for all the docs in the people collection that have a name field with a value of 'Tom':\r\ndb.people.find({name: 'Tom'})\r\nOr just the first one:\r\ndb.people.findOne({name: 'Tom'})\r\nYou can also specify which fields to return by passing a field selection parameter. The following\r\nwill exclude the _id field and only include the age field:\r\ndb.people.find({name: 'Tom'}, {_id: 0, age: 1})\r\nNote: by default, the _id field will be returned, even if you don't ask for it. If you would like not to\r\nget the _id back, you can just follow the previous example and ask for the _id to be excluded by","metadata":{"loc":{"lines":{"from":1806,"to":1827}}}}],["76",{"pageContent":"get the _id back, you can just follow the previous example and ask for the _id to be excluded by\r\nspecifying _id: 0 (or _id: false).If you want to find sub record like address object contains country,\r\ncity, etc.\r\ndb.people.find({'address.country': 'US'})\r\n& specify field too if required\r\ndb.people.find({'address.country': 'US'}, {'name': true, 'address.city': true})Remember that\r\nhttps://riptutorial.com/ 29\r\nthe result has a `.pretty()` method that pretty-prints resulting JSON:\r\ndb.people.find().pretty()\r\nMore update operators\r\nYou can use other operators besides $set when updating a document. The $push operator allows\r\nyou to push a value into an array, in this case we will add a new nickname to the nicknames array.\r\ndb.people.update({name: 'Tom'}, {$push: {nicknames: 'Tommy'}})\r\n// This adds the string 'Tommy' into the nicknames array in Tom's document.\r\nThe $pull operator is the opposite of $push, you can pull specific items from arrays.","metadata":{"loc":{"lines":{"from":1827,"to":1841}}}}],["77",{"pageContent":"// This adds the string 'Tommy' into the nicknames array in Tom's document.\r\nThe $pull operator is the opposite of $push, you can pull specific items from arrays.\r\ndb.people.update({name: 'Tom'}, {$pull: {nicknames: 'Tommy'}})\r\n// This removes the string 'Tommy' from the nicknames array in Tom's document.\r\nThe $pop operator allows you to remove the first or the last value from an array. Let's say Tom's\r\ndocument has a property called siblings that has the value ['Marie', 'Bob', 'Kevin', 'Alex'].\r\ndb.people.update({name: 'Tom'}, {$pop: {siblings: -1}})\r\n// This will remove the first value from the siblings array, which is 'Marie' in this case.\r\ndb.people.update({name: 'Tom'}, {$pop: {siblings: 1}})\r\n// This will remove the last value from the siblings array, which is 'Alex' in this case.\r\n\"multi\" Parameter while updating multiple documents\r\nTo update multiple documents in a collection, set the multi option to true.\r\ndb.collection.update(\r\nquery,\r\nupdate,\r\n{\r\nupsert: boolean,\r\nmulti: boolean,","metadata":{"loc":{"lines":{"from":1841,"to":1858}}}}],["78",{"pageContent":"\"multi\" Parameter while updating multiple documents\r\nTo update multiple documents in a collection, set the multi option to true.\r\ndb.collection.update(\r\nquery,\r\nupdate,\r\n{\r\nupsert: boolean,\r\nmulti: boolean,\r\nwriteConcern: document\r\n}\r\n)\r\nmulti is optional. If set to true, updates multiple documents that meet the query criteria. If set to\r\nfalse, updates one document. The default value is false.\r\ndb.mycol.find() { \"_id\" : ObjectId(598354878df45ec5), \"title\":\"MongoDB Overview\"} {\r\n\"_id\" : ObjectId(59835487adf45ec6), \"title\":\"NoSQL Overview\"} { \"_id\" :\r\nObjectId(59835487adf45ec7), \"title\":\"Tutorials Point Overview\"}\r\ndb.mycol.update({'title':'MongoDB Overview'}, {$set:{'title':'New MongoDB\r\nTutorial'}},{multi:true})\r\nhttps://riptutorial.com/ 30\r\nUpdate of embedded documents.\r\nFor the following schema:\r\n{name: 'Tom', age: 28, marks: [50, 60, 70]}\r\nUpdate Tom's marks to 55 where marks are 50 (Use the positional operator $):\r\ndb.people.update({name: \"Tom\", marks: 50}, {\"$set\": {\"marks.$\": 55}})","metadata":{"loc":{"lines":{"from":1858,"to":1881}}}}],["79",{"pageContent":"{name: 'Tom', age: 28, marks: [50, 60, 70]}\r\nUpdate Tom's marks to 55 where marks are 50 (Use the positional operator $):\r\ndb.people.update({name: \"Tom\", marks: 50}, {\"$set\": {\"marks.$\": 55}})\r\nFor the following schema:\r\n{name: 'Tom', age: 28, marks: [{subject: \"English\", marks: 90},{subject: \"Maths\", marks: 100},\r\n{subject: \"Computes\", marks: 20}]}\r\nUpdate Tom's English marks to 85 :\r\ndb.people.update({name: \"Tom\", \"marks.subject\": \"English\"},{\"$set\":{\"marks.$.marks\": 85}})\r\nExplaining above example:\r\nBy using {name: \"Tom\", \"marks.subject\": \"English\"} you will get the position of the object in the\r\nmarks array, where subject is English. In \"marks.$.marks\", $ is used to update in that position of\r\nthe marks array\r\nUpdate Values in an Array\r\nThe positional $ operator identifies an element in an array to update without explicitly specifying\r\nthe position of the element in the array.\r\nConsider a collection students with the following documents:\r\n{ \"_id\" : 1, \"grades\" : [ 80, 85, 90 ] }","metadata":{"loc":{"lines":{"from":1881,"to":1897}}}}],["80",{"pageContent":"the position of the element in the array.\r\nConsider a collection students with the following documents:\r\n{ \"_id\" : 1, \"grades\" : [ 80, 85, 90 ] }\r\n{ \"_id\" : 2, \"grades\" : [ 88, 90, 92 ] }\r\n{ \"_id\" : 3, \"grades\" : [ 85, 100, 90 ] }\r\nTo update 80 to 82 in the grades array in the first document, use the positional $ operator if you do\r\nnot know the position of the element in the array:\r\ndb.students.update(\r\n{ _id: 1, grades: 80 },\r\n{ $set: { \"grades.$\" : 82 } }\r\n)\r\nRead CRUD Operation online: https://riptutorial.com/mongodb/topic/1683/crud-operation\r\nhttps://riptutorial.com/ 31\r\nChapter 11: Getting database information\r\nExamples\r\nList all databases\r\nshow dbs\r\nor\r\ndb.adminCommand('listDatabases')\r\nor\r\ndb.getMongo().getDBNames()\r\nList all collections in database\r\nshow collections\r\nor\r\nshow tables\r\nor\r\ndb.getCollectionNames()\r\nRead Getting database information online: https://riptutorial.com/mongodb/topic/6397/getting-\r\ndatabase-information\r\nhttps://riptutorial.com/ 32\r\nChapter 12: Indexes\r\nSyntax","metadata":{"loc":{"lines":{"from":1897,"to":1928}}}}],["81",{"pageContent":"or\r\ndb.getCollectionNames()\r\nRead Getting database information online: https://riptutorial.com/mongodb/topic/6397/getting-\r\ndatabase-information\r\nhttps://riptutorial.com/ 32\r\nChapter 12: Indexes\r\nSyntax\r\ndb.collection.createIndex({ <string field> : <1|-1 order> [, <string field> : <1|-1 order>]\r\n});\r\n•\r\nRemarks\r\nPerformance Impact: Note that indexes improve read performances, but can have bad impact on\r\nwrite performance, as inserting a document requires updating all indexes.\r\nExamples\r\nSingle field\r\ndb.people.createIndex({name: 1})\r\nThis creates an ascending single field index on the field name.\r\nIn this type of indexes the sort order is irrelevant, because mongo can traverse the index in both\r\ndirections.\r\nCompound\r\ndb.people.createIndex({name: 1, age: -1})\r\nThis creates an index on multiple fields, in this case on the name and age fields. It will be ascending\r\nin name and descending in age.\r\nIn this type of index, the sort order is relevant, because it will determine whether the index can","metadata":{"loc":{"lines":{"from":1928,"to":1951}}}}],["82",{"pageContent":"in name and descending in age.\r\nIn this type of index, the sort order is relevant, because it will determine whether the index can\r\nsupport a sort operation or not. Reverse sorting is supported on any prefix of a compound index,\r\nas long as the sort is in the reverse sort direction for all of the keys in the sort. Otherwise, sorting\r\nfor compound indexes need to match the order of the index.\r\nField order is also important, in this case the index will be sorted first by name, and within each\r\nname value, sorted by the values of the age field. This allows the index to be used by queries on\r\nthe name field, or on name and age, but not on age alone.\r\nDelete\r\nTo drop an index you could use the index name\r\ndb.people.dropIndex(\"nameIndex\")\r\nhttps://riptutorial.com/ 33\r\nOr the index specification document\r\ndb.people.dropIndex({name: 1})\r\nList\r\ndb.people.getIndexes()\r\nThis will return an array of documents each describing an index on the people collection\r\nIndex Creation Basics","metadata":{"loc":{"lines":{"from":1951,"to":1968}}}}],["83",{"pageContent":"db.people.dropIndex({name: 1})\r\nList\r\ndb.people.getIndexes()\r\nThis will return an array of documents each describing an index on the people collection\r\nIndex Creation Basics\r\nSee the below transactions collection.\r\n> db.transactions.insert({ cr_dr : \"D\", amount : 100, fee : 2});\r\n> db.transactions.insert({ cr_dr : \"C\", amount : 100, fee : 2});\r\n> db.transactions.insert({ cr_dr : \"C\", amount : 10, fee : 2});\r\n> db.transactions.insert({ cr_dr : \"D\", amount : 100, fee : 4});\r\n> db.transactions.insert({ cr_dr : \"D\", amount : 10, fee : 2});\r\n> db.transactions.insert({ cr_dr : \"C\", amount : 10, fee : 4});\r\n> db.transactions.insert({ cr_dr : \"D\", amount : 100, fee : 2});\r\ngetIndexes() functions will show all the indices available for a collection.\r\ndb.transactions.getIndexes();\r\nLet see the output of above statement.\r\n[\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"_id\" : 1\r\n},\r\n\"name\" : \"_id_\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n}\r\n]\r\nThere is already one index for transaction collection. This is because MongoDB creates a unique","metadata":{"loc":{"lines":{"from":1968,"to":1994}}}}],["84",{"pageContent":"[\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"_id\" : 1\r\n},\r\n\"name\" : \"_id_\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n}\r\n]\r\nThere is already one index for transaction collection. This is because MongoDB creates a unique\r\nindex on the _id field during the creation of a collection. The _id index prevents clients from\r\ninserting two documents with the same value for the _id field. You cannot drop this index on the\r\n_id field.\r\nNow let's add an index for cr_dr field;\r\ndb.transactions.createIndex({ cr_dr : 1 });\r\nThe result of the index execution is as follows.\r\nhttps://riptutorial.com/ 34\r\n{\r\n\"createdCollectionAutomatically\" : false,\r\n\"numIndexesBefore\" : 1,\r\n\"numIndexesAfter\" : 2,\r\n\"ok\" : 1\r\n}\r\nThe createdCollectionAutomatically indicates if the operation created a collection. If a\r\ncollection does not exist, MongoDB creates the collection as part of the indexing\r\noperation.\r\nLet run db.transactions.getIndexes(); again.\r\n[\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"_id\" : 1\r\n},\r\n\"name\" : \"_id_\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n},\r\n{\r\n\"v\" : 1,","metadata":{"loc":{"lines":{"from":1994,"to":2032}}}}],["85",{"pageContent":"operation.\r\nLet run db.transactions.getIndexes(); again.\r\n[\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"_id\" : 1\r\n},\r\n\"name\" : \"_id_\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n},\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"cr_dr\" : 1\r\n},\r\n\"name\" : \"cr_dr_1\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n}\r\n]\r\nNow you see transactions collection have two indices. Default _id index and cr_dr_1 which we\r\ncreated. The name is assigned by MongoDB. You can set your own name like below.\r\ndb.transactions.createIndex({ cr_dr : -1 },{name : \"index on cr_dr desc\"})\r\nNow db.transactions.getIndexes(); will give you three indices.\r\n[\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"_id\" : 1\r\n},\r\n\"name\" : \"_id_\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n},\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"cr_dr\" : 1\r\n},\r\n\"name\" : \"cr_dr_1\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n},\r\nhttps://riptutorial.com/ 35\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"cr_dr\" : -1\r\n},\r\n\"name\" : \"index on cr_dr desc\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n}\r\n]\r\nWhile creating index { cr_dr : -1 } 1 means index will be in ascending order and -1 for descending","metadata":{"loc":{"lines":{"from":2032,"to":2083}}}}],["86",{"pageContent":"\"key\" : {\r\n\"cr_dr\" : -1\r\n},\r\n\"name\" : \"index on cr_dr desc\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n}\r\n]\r\nWhile creating index { cr_dr : -1 } 1 means index will be in ascending order and -1 for descending\r\norder.\r\n2.4\r\nHashed indexes\r\nIndexes can be defined also as hashed. This is more performant on equality queries, but is not\r\nefficient for range queries; however you can define both hashed and ascending/descending\r\nindexes on the same field.\r\n> db.transactions.createIndex({ cr_dr : \"hashed\" });\r\n> db.transactions.getIndexes(\r\n[\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"_id\" : 1\r\n},\r\n\"name\" : \"_id_\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n},\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"cr_dr\" : \"hashed\"\r\n},\r\n\"name\" : \"cr_dr_hashed\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n}\r\n]\r\nDropping/Deleting an Index\r\nIf index name is known,\r\ndb.collection.dropIndex('name_of_index');\r\nIf index name is not known,\r\ndb.collection.dropIndex( { 'name_of_field' : -1 } );\r\nhttps://riptutorial.com/ 36\r\nGet Indices of a Collection\r\ndb.collection.getIndexes();\r\nOutput\r\n[\r\n{","metadata":{"loc":{"lines":{"from":2083,"to":2127}}}}],["87",{"pageContent":"If index name is not known,\r\ndb.collection.dropIndex( { 'name_of_field' : -1 } );\r\nhttps://riptutorial.com/ 36\r\nGet Indices of a Collection\r\ndb.collection.getIndexes();\r\nOutput\r\n[\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"_id\" : 1\r\n},\r\n\"name\" : \"_id_\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n},\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"cr_dr\" : 1\r\n},\r\n\"name\" : \"cr_dr_1\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n},\r\n{\r\n\"v\" : 1,\r\n\"key\" : {\r\n\"cr_dr\" : -1\r\n},\r\n\"name\" : \"index on cr_dr desc\",\r\n\"ns\" : \"documentation_db.transactions\"\r\n}\r\n]\r\nUnique Index\r\ndb.collection.createIndex( { \"user_id\": 1 }, { unique: true } )\r\nenforce uniqueness on the defined index (either single or compound). Building the index will fail if\r\nthe collection already contains duplicate values; the indexing will fail also with multiple entries\r\nmissing the field (since they will all be indexed with the value null) unless sparse: true is specified.\r\nSparse indexes and Partial indexes\r\nSparse indexes:","metadata":{"loc":{"lines":{"from":2127,"to":2165}}}}],["88",{"pageContent":"missing the field (since they will all be indexed with the value null) unless sparse: true is specified.\r\nSparse indexes and Partial indexes\r\nSparse indexes:\r\nThese can be particularly useful for fields that are optional but which should also be unique.\r\n{ \"_id\" : \"john@example.com\", \"nickname\" : \"Johnnie\" }\r\n{ \"_id\" : \"jane@example.com\" }\r\n{ \"_id\" : \"julia@example.com\", \"nickname\" : \"Jules\"}\r\n{ \"_id\" : \"jack@example.com\" }\r\nSince two entries have no \"nickname\" specified and indexing will treat unspecified fields as null,\r\nhttps://riptutorial.com/ 37\r\nthe index creation would fail with 2 documents having 'null', so:\r\ndb.scores.createIndex( { nickname: 1 } , { unique: true, sparse: true } )\r\nwill let you still have 'null' nicknames.\r\nSparse indexes are more compact since they skip/ignore documents that don't specify that field.\r\nSo if you have a collection where only less than 10% of documents specify this field, you can","metadata":{"loc":{"lines":{"from":2165,"to":2179}}}}],["89",{"pageContent":"Sparse indexes are more compact since they skip/ignore documents that don't specify that field.\r\nSo if you have a collection where only less than 10% of documents specify this field, you can\r\ncreate much smaller indexes - making better use of limited memory if you want to do queries like:\r\ndb.scores.find({'nickname': 'Johnnie'})\r\nPartial indexes:\r\nPartial indexes represent a superset of the functionality offered by sparse indexes and\r\nshould be preferred over sparse indexes. (New in version 3.2)\r\nPartial indexes determine the index entries based on the specified filter.\r\ndb.restaurants.createIndex(\r\n{ cuisine: 1 },\r\n{ partialFilterExpression: { rating: { $gt: 5 } } }\r\n)\r\nIf rating is greater than 5, then cuisine will be indexed. Yes, we can specify a property to be\r\nindexed based on the value of other properties also.\r\nDifference between Sparse and Partial indexes:\r\nSparse indexes select documents to index solely based on the existence of the indexed field, or","metadata":{"loc":{"lines":{"from":2179,"to":2194}}}}],["90",{"pageContent":"indexed based on the value of other properties also.\r\nDifference between Sparse and Partial indexes:\r\nSparse indexes select documents to index solely based on the existence of the indexed field, or\r\nfor compound indexes, the existence of the indexed fields.\r\nPartial indexes determine the index entries based on the specified filter. The filter can include\r\nfields other than the index keys and can specify conditions other than just an existence check.\r\nStill, a partial index can implement the same behavior as a sparse index\r\nEg:\r\ndb.contacts.createIndex(\r\n{ name: 1 },\r\n{ partialFilterExpression: { name: { $exists: true } } }\r\n)\r\nNote: Both the partialFilterExpression option and the sparse option cannot be specified\r\nat the same time.\r\nRead Indexes online: https://riptutorial.com/mongodb/topic/3934/indexes\r\nhttps://riptutorial.com/ 38\r\nChapter 13: Java Driver\r\nExamples\r\nCreate a tailable cursor\r\nfind(query).projection(fields).cursorType(CursorType.TailableAwait).iterator();","metadata":{"loc":{"lines":{"from":2194,"to":2213}}}}],["91",{"pageContent":"https://riptutorial.com/ 38\r\nChapter 13: Java Driver\r\nExamples\r\nCreate a tailable cursor\r\nfind(query).projection(fields).cursorType(CursorType.TailableAwait).iterator();\r\nThat code applies to the MongoCollection class.\r\nCursorType is an enum and it has the following values:\r\nTailable\r\nTailableAwait\r\nCorresponding to the old (<3.0) DBCursor addOption Bytes types:\r\nBytes.QUERYOPTION_TAILABLE\r\nBytes.QUERYOPTION_AWAITDATA\r\nCreate a database user\r\nTo create a user dev with password password123\r\nMongoClient mongo = new MongoClient(\"localhost\", 27017);\r\nMongoDatabase db = mongo.getDatabase(\"testDB\");\r\nMap<String, Object> commandArguments = new BasicDBObject();\r\ncommandArguments.put(\"createUser\", \"dev\");\r\ncommandArguments.put(\"pwd\", \"password123\");\r\nString[] roles = { \"readWrite\" };\r\ncommandArguments.put(\"roles\", roles);\r\nBasicDBObject command = new BasicDBObject(commandArguments);\r\ndb.runCommand(command);\r\nFetch Collection data with condition","metadata":{"loc":{"lines":{"from":2213,"to":2236}}}}],["92",{"pageContent":"String[] roles = { \"readWrite\" };\r\ncommandArguments.put(\"roles\", roles);\r\nBasicDBObject command = new BasicDBObject(commandArguments);\r\ndb.runCommand(command);\r\nFetch Collection data with condition\r\nTo get data from testcollection collection in testdb database where name=dev\r\nimport org.bson.Document;\r\nimport com.mongodb.BasicDBObject;\r\nimport com.mongodb.MongoClient;\r\nimport com.mongodb.ServerAddress;\r\nimport com.mongodb.client.MongoCollection;\r\nimport com.mongodb.client.MongoCursor;\r\nimport com.mongodb.client.MongoDatabase;\r\nMongoClient mongoClient = new MongoClient(new ServerAddress(\"localhost\", 27017));\r\nMongoDatabase db = mongoClient.getDatabase(\"testdb\");\r\nMongoCollection<Document> collection = db.getCollection(\"testcollection\");\r\nhttps://riptutorial.com/ 39\r\nBasicDBObject searchQuery = new BasicDBObject();\r\nsearchQuery.put(\"name\",\"dev\");\r\nMongoCursor<Document> cursor = collection.find(searchQuery).iterator();\r\ntry {\r\nwhile (cursor.hasNext()) {\r\nSystem.out.println(cursor.next().toJson());\r\n}","metadata":{"loc":{"lines":{"from":2236,"to":2259}}}}],["93",{"pageContent":"searchQuery.put(\"name\",\"dev\");\r\nMongoCursor<Document> cursor = collection.find(searchQuery).iterator();\r\ntry {\r\nwhile (cursor.hasNext()) {\r\nSystem.out.println(cursor.next().toJson());\r\n}\r\n} finally {\r\ncursor.close();\r\n}\r\nRead Java Driver online: https://riptutorial.com/mongodb/topic/6286/java-driver\r\nhttps://riptutorial.com/ 40\r\nChapter 14: Managing MongoDB\r\nExamples\r\nListing currently running queries\r\nThe following command lists out the queries that are currently being run on the server\r\ndb.currentOp()\r\nThe output looks something similar to this\r\n{\r\n\"inprog\" : [\r\n{\r\n\"opid\" : \"302616759\",\r\n\"active\" : true,\r\n\"secs_running\" : 1,\r\n\"microsecs_running\" : NumberLong(1167662),\r\n\"op\" : \"getmore\",\r\n\"ns\" : \"local.oplog.rs\",\r\n\"query\" : {\r\n},\r\n...\r\n},\r\n{\r\n\"desc\" : \"conn48\",\r\n\"threadId\" : \"0x114c00700\",\r\n\"connectionId\" : 48,\r\n\"opid\" : \"mdss_shard00:302616760\",\r\n\"active\" : true,\r\n\"secs_running\" : 1,\r\n\"microsecs_running\" : NumberLong(1169659),\r\n\"op\" : \"getmore\",\r\n\"ns\" : \"local.oplog.rs\"\r\n...\r\n}\r\n]\r\n}","metadata":{"loc":{"lines":{"from":2259,"to":2302}}}}],["94",{"pageContent":"\"connectionId\" : 48,\r\n\"opid\" : \"mdss_shard00:302616760\",\r\n\"active\" : true,\r\n\"secs_running\" : 1,\r\n\"microsecs_running\" : NumberLong(1169659),\r\n\"op\" : \"getmore\",\r\n\"ns\" : \"local.oplog.rs\"\r\n...\r\n}\r\n]\r\n}\r\nThe inprog attribute indicates the queries are currently in progress. The opid is Id of the query or\r\noperation. secs_running indicates the time for which it has been running. This is sometimes useful\r\nto identify long running queries.\r\nRead Managing MongoDB online: https://riptutorial.com/mongodb/topic/7553/managing-mongodb\r\nhttps://riptutorial.com/ 41\r\nChapter 15: Mongo as a Replica Set\r\nExamples\r\nMongodb as a Replica Set\r\nWe would be creating mongodb as a replica set having 3 instances. One instance would be\r\nprimary and the other 2 instances would be secondary.\r\nFor simplicity, I am going to have a replica set with 3 instances of mongodb running on the same\r\nserver and thus to achieve this, all three mongodb instances would be running on different port\r\nnumbers.","metadata":{"loc":{"lines":{"from":2302,"to":2325}}}}],["95",{"pageContent":"server and thus to achieve this, all three mongodb instances would be running on different port\r\nnumbers.\r\nIn production environment where in you have a dedicated mongodb instance running on a single\r\nserver you can reuse the same port numbers.\r\nCreate data directories ( path where mongodb data would be stored in a file)1.\r\n- mkdir c:\\data\\server1 (datafile path for instance 1)\r\n- mkdir c:\\data\\server2 (datafile path for instance 2)\r\n- mkdir c:\\data\\server3 (datafile path for instance 3)\r\na. Start the first mongod instance2.\r\nOpen command prompt and type the following press enter.•\r\nmongod --replSet s0 --dbpath c:\\data\\server1 --port 37017 --smallfiles --oplogSize 100\r\nThe above command associates the instance of mongodb to a replicaSet name \"s0\" and the starts\r\nthe first instance of mongodb on port 37017 with oplogSize 100MB\r\nb. Similarly start the second instance of Mongodb2.\r\nmongod --replSet s0 --dbpath c:\\data\\server2 --port 37018 --smallfiles --oplogSize 100","metadata":{"loc":{"lines":{"from":2325,"to":2339}}}}],["96",{"pageContent":"b. Similarly start the second instance of Mongodb2.\r\nmongod --replSet s0 --dbpath c:\\data\\server2 --port 37018 --smallfiles --oplogSize 100\r\nThe above command associates the instance of mongodb to a replicaSet name \"s0\" and the starts\r\nthe first instance of mongodb on port 37018 with oplogSize 100MB\r\nc. Now start the third instance of Mongodb2.\r\nmongod --replSet s0 --dbpath c:\\data\\server3 --port 37019 --smallfiles --oplogSize 100\r\nThe above command associates the instance of mongodb to a replicaSet name \"s0\" and the starts\r\nthe first instance of mongodb on port 37019 with oplogSize 100MB\r\nWith all the 3 instances started, these 3 instances are independent of each other currently. We\r\nwould now need to group these instances as a replica set. We do this with the help of a config\r\nhttps://riptutorial.com/ 42\r\nobject.\r\n3.a Connect to any of the mongod servers via the mongo shell. To do that open the command\r\nprompt and type.\r\nmongo --port 37017","metadata":{"loc":{"lines":{"from":2339,"to":2353}}}}],["97",{"pageContent":"https://riptutorial.com/ 42\r\nobject.\r\n3.a Connect to any of the mongod servers via the mongo shell. To do that open the command\r\nprompt and type.\r\nmongo --port 37017\r\nOnce connected to the mongo shell, create a config object\r\nvar config = {\"_id\":\"s0\", members[]};\r\nthis config object has 2 attributes\r\n_id: the name of the replica Set ( \"s0\" )1.\r\nmembers: [] (members is an array of mongod instances. lets keep this blank for now,\r\nwe will add members via the push command.\r\n2.\r\n•\r\n3.b To Push(add) mongod instances to the members array in the config object. On the mongo\r\nshell type\r\nconfig.members.push({\"_id\":0,\"host\":\"localhost:37017\"});\r\nconfig.members.push({\"_id\":1,\"host\":\"localhost:37018\"});\r\nconfig.members.push({\"_id\":2,\"host\":\"localhost:37019\"});\r\nWe assign each mongod instance an _id and an host. _id can be any unique number and the host\r\nshould be the hostname of the server on which its running followed by the port number.\r\nInitiate the config object by the following command in the mongo shell.4.","metadata":{"loc":{"lines":{"from":2353,"to":2373}}}}],["98",{"pageContent":"should be the hostname of the server on which its running followed by the port number.\r\nInitiate the config object by the following command in the mongo shell.4.\r\nrs.initiate(config)\r\nGive it a few seconds and we have a replica set of 3 mongod instances running on the\r\nserver. type the following command to check the status of the replica set and to identify\r\nwhich one is primary and which one is secondary.\r\n5.\r\nrs.status();\r\nRead Mongo as a Replica Set online: https://riptutorial.com/mongodb/topic/6603/mongo-as-a-\r\nreplica-set\r\nhttps://riptutorial.com/ 43\r\nChapter 16: Mongo as a Replica Set\r\nExamples\r\nCheck MongoDB Replica Set states\r\nUse the below command to check the replica set status.\r\nCommand : rs.status()\r\nConnect any one of replica member and fire this command it will give the full state of the replica\r\nset\r\nExample :\r\n{\r\n\"set\" : \"ReplicaName\",\r\n\"date\" : ISODate(\"2016-09-26T07:36:04.935Z\"),\r\n\"myState\" : 1,\r\n\"term\" : NumberLong(-1),\r\n\"heartbeatIntervalMillis\" : NumberLong(2000),\r\n\"members\" : [\r\n{","metadata":{"loc":{"lines":{"from":2373,"to":2399}}}}],["99",{"pageContent":"set\r\nExample :\r\n{\r\n\"set\" : \"ReplicaName\",\r\n\"date\" : ISODate(\"2016-09-26T07:36:04.935Z\"),\r\n\"myState\" : 1,\r\n\"term\" : NumberLong(-1),\r\n\"heartbeatIntervalMillis\" : NumberLong(2000),\r\n\"members\" : [\r\n{\r\n\"_id\" : 0,\r\n\"name\" : \"<IP>:<PORT>,\r\n\"health\" : 1,\r\n\"state\" : 1,\r\n\"stateStr\" : \"PRIMARY\",\r\n\"uptime\" : 5953744,\r\n\"optime\" : Timestamp(1474875364, 36),\r\n\"optimeDate\" : ISODate(\"2016-09-26T07:36:04Z\"),\r\n\"electionTime\" : Timestamp(1468921646, 1),\r\n\"electionDate\" : ISODate(\"2016-07-19T09:47:26Z\"),\r\n\"configVersion\" : 6,\r\n\"self\" : true\r\n},\r\n{\r\n\"_id\" : 1,\r\n\"name\" : \"<IP>:<PORT>\",\r\n\"health\" : 1,\r\n\"state\" : 2,\r\n\"stateStr\" : \"SECONDARY\",\r\n\"uptime\" : 5953720,\r\n\"optime\" : Timestamp(1474875364, 13),\r\n\"optimeDate\" : ISODate(\"2016-09-26T07:36:04Z\"),\r\n\"lastHeartbeat\" : ISODate(\"2016-09-26T07:36:04.244Z\"),\r\n\"lastHeartbeatRecv\" : ISODate(\"2016-09-26T07:36:03.871Z\"),\r\n\"pingMs\" : NumberLong(0),\r\n\"syncingTo\" : \"10.9.52.55:10050\",\r\n\"configVersion\" : 6\r\n},\r\n{\r\n\"_id\" : 2,\r\n\"name\" : \"<IP>:<PORT>\",\r\n\"health\" : 1,\r\nhttps://riptutorial.com/ 44\r\n\"state\" : 7,","metadata":{"loc":{"lines":{"from":2399,"to":2442}}}}],["100",{"pageContent":"\"pingMs\" : NumberLong(0),\r\n\"syncingTo\" : \"10.9.52.55:10050\",\r\n\"configVersion\" : 6\r\n},\r\n{\r\n\"_id\" : 2,\r\n\"name\" : \"<IP>:<PORT>\",\r\n\"health\" : 1,\r\nhttps://riptutorial.com/ 44\r\n\"state\" : 7,\r\n\"stateStr\" : \"ARBITER\",\r\n\"uptime\" : 5953696,\r\n\"lastHeartbeat\" : ISODate(\"2016-09-26T07:36:03.183Z\"),\r\n\"lastHeartbeatRecv\" : ISODate(\"2016-09-26T07:36:03.715Z\"),\r\n\"pingMs\" : NumberLong(0),\r\n\"configVersion\" : 6\r\n},\r\n{\r\n\"_id\" : 3,\r\n\"name\" : \"<IP>:<PORT>\",\r\n\"health\" : 1,\r\n\"state\" : 2,\r\n\"stateStr\" : \"SECONDARY\",\r\n\"uptime\" : 1984305,\r\n\"optime\" : Timestamp(1474875361, 16),\r\n\"optimeDate\" : ISODate(\"2016-09-26T07:36:01Z\"),\r\n\"lastHeartbeat\" : ISODate(\"2016-09-26T07:36:02.921Z\"),\r\n\"lastHeartbeatRecv\" : ISODate(\"2016-09-26T07:36:03.793Z\"),\r\n\"pingMs\" : NumberLong(22),\r\n\"lastHeartbeatMessage\" : \"syncing from: 10.9.52.56:10050\",\r\n\"syncingTo\" : \"10.9.52.56:10050\",\r\n\"configVersion\" : 6\r\n}\r\n],\r\n\"ok\" : 1\r\n}\r\nFrom the above we can know the entire replica set status\r\nRead Mongo as a Replica Set online: https://riptutorial.com/mongodb/topic/7043/mongo-as-a-","metadata":{"loc":{"lines":{"from":2442,"to":2479}}}}],["101",{"pageContent":"\"configVersion\" : 6\r\n}\r\n],\r\n\"ok\" : 1\r\n}\r\nFrom the above we can know the entire replica set status\r\nRead Mongo as a Replica Set online: https://riptutorial.com/mongodb/topic/7043/mongo-as-a-\r\nreplica-set\r\nhttps://riptutorial.com/ 45\r\nChapter 17: Mongo as Shards\r\nExamples\r\nSharding Environment Setup\r\nSharding Group Members :\r\nFor sharding there are three players.\r\nConfig Server1.\r\nReplica Sets2.\r\nMongos\r\nFor a mongo shard we need to setup the above three servers.\r\n3.\r\nConfig Server Setup : add the following to mongod conf file\r\nsharding:\r\nclusterRole: configsvr\r\nreplication:\r\nreplSetName: <setname>\r\nrun : mongod --config\r\nwe can choose config server as replica set or may be a standalone server. Based on our\r\nrequirement we can choose the best. If config need to run in replica set we need to follow the\r\nreplica set setup\r\nReplica Setup : Create replica set // Please refer the replica setup\r\nMongoS Setup : Mongos is main setup in shard. Its is query router to access all replica sets","metadata":{"loc":{"lines":{"from":2479,"to":2508}}}}],["102",{"pageContent":"replica set setup\r\nReplica Setup : Create replica set // Please refer the replica setup\r\nMongoS Setup : Mongos is main setup in shard. Its is query router to access all replica sets\r\nAdd the following in mongos conf file\r\nsharding:\r\nconfigDB: <configReplSetName>/cfg1.example.net:27017;\r\nConfigure Shared :\r\nConnect the mongos via shell (mongo --host --port )\r\nsh.addShard( \"/s1-mongo1.example.net:27017\")1.\r\nsh.enableSharding(\"\")2.\r\nsh.shardCollection(\"< database >.< collection >\", { < key > : < direction > } )3.\r\nsh.status() // To ensure the sharding4.\r\nhttps://riptutorial.com/ 46\r\nRead Mongo as Shards online: https://riptutorial.com/mongodb/topic/7044/mongo-as-shards\r\nhttps://riptutorial.com/ 47\r\nChapter 18: MongoDB - Configure a\r\nReplicaSet to support TLS/SSL\r\nIntroduction\r\nHow to configure a ReplicaSet to support TLS/SSL?\r\nWe will deploy a 3 Nodes ReplicaSet in your local environment and we will use a self-signed\r\ncertificate. Do not use a self-signed certificate in PRODUCTION.","metadata":{"loc":{"lines":{"from":2508,"to":2528}}}}],["103",{"pageContent":"We will deploy a 3 Nodes ReplicaSet in your local environment and we will use a self-signed\r\ncertificate. Do not use a self-signed certificate in PRODUCTION.\r\nHow to connect your Client to this ReplicaSet?\r\nWe will connect a Mongo Shell.\r\nA description of TLS/SSL, PKI (Public Key Infrastructure) certificates, and Certificate Authority is\r\nbeyond the scope of this documentation.\r\nExamples\r\nHow to configure a ReplicaSet to support TLS/SSL?\r\nCreate the Root Certificate\r\nThe Root Certificate (aka CA File) will be used to sign and identify your certificate. To generate it,\r\nrun the command below.\r\nopenssl req -nodes -out ca.pem -new -x509 -keyout ca.key\r\nKeep the root certificate and its key carefully, both will be used to sign your certificates. The root\r\ncertificate might be used by your client as well.\r\nGenerate the Certificate Requests and the Private Keys\r\nWhen generating the Certificate Signing Request (aka CSR), input the exact hostname (or IP)","metadata":{"loc":{"lines":{"from":2528,"to":2543}}}}],["104",{"pageContent":"certificate might be used by your client as well.\r\nGenerate the Certificate Requests and the Private Keys\r\nWhen generating the Certificate Signing Request (aka CSR), input the exact hostname (or IP)\r\nof your node in the Common Name (aka CN) field. The others fields must have exactly the\r\nsame value. You might need to modify your /etc/hosts file.\r\nThe commands below will generate the CSR files and the RSA Private Keys (4096 bits).\r\nopenssl req -nodes -newkey rsa:4096 -sha256 -keyout mongodb_node_1.key -out mongodb_node_1.csr\r\nopenssl req -nodes -newkey rsa:4096 -sha256 -keyout mongodb_node_2.key -out mongodb_node_2.csr\r\nopenssl req -nodes -newkey rsa:4096 -sha256 -keyout mongodb_node_3.key -out mongodb_node_3.csr\r\nhttps://riptutorial.com/ 48\r\nYou must generate one CSR for each node of your ReplicaSet. Remember that the Common\r\nName is not the same from one node to another. Don't base multiple CSRs on the same\r\nPrivate Key.\r\nYou must now have 3 CSRs and 3 Private Keys.","metadata":{"loc":{"lines":{"from":2543,"to":2556}}}}],["105",{"pageContent":"Name is not the same from one node to another. Don't base multiple CSRs on the same\r\nPrivate Key.\r\nYou must now have 3 CSRs and 3 Private Keys.\r\nmongodb_node_1.key - mongodb_node_2.key - mongodb_node_3.key\r\nmongodb_node_1.csr - mongodb_node_2.csr - mongodb_node_3.csr\r\nSign your Certificate Requests\r\nUse the CA File (ca.pem) and its Private Key (ca.key) generated previously to sign each\r\nCertificate Request by running the commands below.\r\nopenssl x509 -req -in mongodb_node_1.csr -CA ca.pem -CAkey ca.key -set_serial 00 -out\r\nmongodb_node_1.crt\r\nopenssl x509 -req -in mongodb_node_2.csr -CA ca.pem -CAkey ca.key -set_serial 00 -out\r\nmongodb_node_2.crt\r\nopenssl x509 -req -in mongodb_node_3.csr -CA ca.pem -CAkey ca.key -set_serial 00 -out\r\nmongodb_node_3.crt\r\nYou must sign each CSR.\r\nYour must now have 3 CSRs, 3 Private Keys and 3 self-signed Certificates. Only the Private Keys\r\nand the Certificates will be used by MongoDB.\r\nmongodb_node_1.key - mongodb_node_2.key - mongodb_node_3.key","metadata":{"loc":{"lines":{"from":2556,"to":2573}}}}],["106",{"pageContent":"and the Certificates will be used by MongoDB.\r\nmongodb_node_1.key - mongodb_node_2.key - mongodb_node_3.key\r\nmongodb_node_1.csr - mongodb_node_2.csr - mongodb_node_3.csr\r\nmongodb_node_1.crt - mongodb_node_2.crt - mongodb_node_3.crt\r\nEach certificate corresponds to one node. Remember carefully which CN / hostname your\r\ngave to each CSR.\r\nConcat each Node Certificate with its key\r\nRun the commands below to concat each Node Certificate with its key in one file (MongoDB\r\nrequirement).\r\ncat mongodb_node_1.key mongodb_node_1.crt > mongodb_node_1.pem\r\ncat mongodb_node_2.key mongodb_node_2.crt > mongodb_node_2.pem\r\ncat mongodb_node_3.key mongodb_node_3.crt > mongodb_node_3.pem\r\nYour must now have 3 PEM files.\r\nmongodb_node_1.pem - mongodb_node_2.pem - mongodb_node_3.pem\r\nhttps://riptutorial.com/ 49\r\nDeploy your ReplicaSet\r\nWe will assume that your pem files are located in your current folder as well as data/data1,\r\ndata/data2 and data/data3.","metadata":{"loc":{"lines":{"from":2573,"to":2590}}}}],["107",{"pageContent":"https://riptutorial.com/ 49\r\nDeploy your ReplicaSet\r\nWe will assume that your pem files are located in your current folder as well as data/data1,\r\ndata/data2 and data/data3.\r\nRun the commands below to deploy your 3 Nodes ReplicaSet listening on port 27017, 27018 and\r\n27019.\r\nmongod --dbpath data/data_1 --replSet rs0 --port 27017 --sslMode requireSSL --sslPEMKeyFile\r\nmongodb_node_1.pem\r\nmongod --dbpath data/data_2 --replSet rs0 --port 27018 --sslMode requireSSL --sslPEMKeyFile\r\nmongodb_node_2.pem\r\nmongod --dbpath data/data_3 --replSet rs0 --port 27019 --sslMode requireSSL --sslPEMKeyFile\r\nmongodb_node_3.pem\r\nYou now have a 3 Nodes ReplicaSet deployed on your local environment and all their transactions\r\nare encrypted. You cannot connect to this ReplicaSet without using TLS.\r\nDeploy your ReplicaSet for Mutual SSL / Mutual Trust\r\nTo force your client to provide a Client Certificate (Mutual SSL), you must add the CA File when\r\nrunning your instances.","metadata":{"loc":{"lines":{"from":2590,"to":2606}}}}],["108",{"pageContent":"Deploy your ReplicaSet for Mutual SSL / Mutual Trust\r\nTo force your client to provide a Client Certificate (Mutual SSL), you must add the CA File when\r\nrunning your instances.\r\nmongod --dbpath data/data_1 --replSet rs0 --port 27017 --sslMode requireSSL --sslPEMKeyFile\r\nmongodb_node_1.pem --sslCAFile ca.pem\r\nmongod --dbpath data/data_2 --replSet rs0 --port 27018 --sslMode requireSSL --sslPEMKeyFile\r\nmongodb_node_2.pem --sslCAFile ca.pem\r\nmongod --dbpath data/data_3 --replSet rs0 --port 27019 --sslMode requireSSL --sslPEMKeyFile\r\nmongodb_node_3.pem --sslCAFile ca.pem\r\nYou now have a 3 Nodes ReplicaSet deployed on your local environment and all their transactions\r\nare encrypted. You cannot connect to this ReplicaSet without using TLS or without providing a\r\nClient Certificate trusted by your CA.\r\nHow to connect your Client (Mongo Shell) to a ReplicaSet?\r\nNo Mutual SSL\r\nIn this example, we might use the CA File (ca.pem) that you generated during the \"How to","metadata":{"loc":{"lines":{"from":2606,"to":2620}}}}],["109",{"pageContent":"Client Certificate trusted by your CA.\r\nHow to connect your Client (Mongo Shell) to a ReplicaSet?\r\nNo Mutual SSL\r\nIn this example, we might use the CA File (ca.pem) that you generated during the \"How to\r\nconfigure a ReplicaSet to support TLS/SSL?\" section. We will assume that the CA file is located in\r\nyour current folder.\r\nWe will assume that your 3 nodes are running on mongo1:27017, mongo2:27018 and\r\nmongo3:27019. (You might need to modify your /etc/hosts file.)\r\nFrom MongoDB 3.2.6, if your CA File is registered in your Operating System Trust Store, you can\r\nconnect to your ReplicaSet without providing the CA File.\r\nhttps://riptutorial.com/ 50\r\nmongo --ssl --host rs0/mongo1:27017,mongo2:27018,mongo3:27019\r\nOtherwise you must provide the CA File.\r\nmongo --ssl --sslCAFile ca.pem --host rs0/mongo1:27017,mongo2:27018,mongo3:27019\r\nYou are now connected to your ReplicaSet and all the transactions between your Mongo Shell and\r\nyour ReplicaSet are encrypted.\r\nWith Mutual SSL","metadata":{"loc":{"lines":{"from":2620,"to":2636}}}}],["110",{"pageContent":"You are now connected to your ReplicaSet and all the transactions between your Mongo Shell and\r\nyour ReplicaSet are encrypted.\r\nWith Mutual SSL\r\nIf your ReplicaSet asks for a Client Certificate, you must provide one signed by the CA used by the\r\nReplicaSet Deployment. The steps to generate the Client Certificate are almost the same as the\r\nones to generate the Server Certificate.\r\nIndeed, you just need to modify the Common Name Field during the CSR creation. Instead of\r\nproviding 1 Node Hostname in the Common Name Field, you need to provide all the ReplicaSet\r\nHostnames separated by a comma.\r\nopenssl req -nodes -newkey rsa:4096 -sha256 -keyout mongodb_client.key -out mongodb_client.csr\r\n...\r\nCommon Name (e.g. server FQDN or YOUR name) []: mongo1,mongo2,mongo3\r\nYou might face the Common Name size limitation if the Common Name field is too long (more\r\nthan 64 bytes long). To bypass this limitation, you must use the SubjectAltName when generating\r\nthe CSR.","metadata":{"loc":{"lines":{"from":2636,"to":2650}}}}],["111",{"pageContent":"You might face the Common Name size limitation if the Common Name field is too long (more\r\nthan 64 bytes long). To bypass this limitation, you must use the SubjectAltName when generating\r\nthe CSR.\r\nopenssl req -nodes -newkey rsa:4096 -sha256 -keyout mongodb_client.key -out mongodb_client.csr\r\n-config <(\r\ncat <<-EOF\r\n[req]\r\ndefault_bits = 4096\r\nprompt = no\r\ndefault_md = sha256\r\nreq_extensions = req_ext\r\ndistinguished_name = dn\r\n[ dn ]\r\nCN = .\r\n[ req_ext ]\r\nsubjectAltName = @alt_names\r\n[ alt_names ]\r\nDNS.1 = mongo1\r\nDNS.2 = mongo2\r\nDNS.3 = mongo3\r\nEOF\r\n)\r\nThen you sign the CSR using the CA certificate and key.\r\nhttps://riptutorial.com/ 51\r\nopenssl x509 -req -in mongodb_client.csr -CA ca.pem -CAkey ca.key -set_serial 00 -out\r\nmongodb_client.crt\r\nFinally, you concat the key and the signed certificate.\r\ncat mongodb_client.key mongodb_client.crt > mongodb_client.pem\r\nTo connect to your ReplicaSet, you can now provide the newly generated Client Certificate.","metadata":{"loc":{"lines":{"from":2650,"to":2678}}}}],["112",{"pageContent":"cat mongodb_client.key mongodb_client.crt > mongodb_client.pem\r\nTo connect to your ReplicaSet, you can now provide the newly generated Client Certificate.\r\nmongo --ssl --sslCAFile ca.pem --host rs0/mongo1:27017,mongo2:27018,mongo3:27019 --\r\nsslPEMKeyFile mongodb_client.pem\r\nYou are now connected to your ReplicaSet and all the transactions between your Mongo Shell and\r\nyour ReplicaSet are encrypted.\r\nRead MongoDB - Configure a ReplicaSet to support TLS/SSL online:\r\nhttps://riptutorial.com/mongodb/topic/9539/mongodb---configure-a-replicaset-to-support-tls-ssl\r\nhttps://riptutorial.com/ 52\r\nChapter 19: MongoDB Aggregation\r\nExamples\r\nAggregate query examples useful for work and learning\r\nAggregation is used to perform complex data search operations in the mongo query which can't be\r\ndone in normal \"find\" query.\r\nCreate some dummy data:\r\ndb.employees.insert({\"name\":\"Adma\",\"dept\":\"Admin\",\"languages\":[\"german\",\"french\",\"english\",\"hindi\"],\"ag\r\n\"totalExp\":10});","metadata":{"loc":{"lines":{"from":2678,"to":2694}}}}],["113",{"pageContent":"done in normal \"find\" query.\r\nCreate some dummy data:\r\ndb.employees.insert({\"name\":\"Adma\",\"dept\":\"Admin\",\"languages\":[\"german\",\"french\",\"english\",\"hindi\"],\"ag\r\n\"totalExp\":10});\r\ndb.employees.insert({\"name\":\"Anna\",\"dept\":\"Admin\",\"languages\":[\"english\",\"hindi\"],\"age\":35,\r\n\"totalExp\":11});\r\ndb.employees.insert({\"name\":\"Bob\",\"dept\":\"Facilities\",\"languages\":[\"english\",\"hindi\"],\"age\":36,\r\n\"totalExp\":14});\r\ndb.employees.insert({\"name\":\"Cathy\",\"dept\":\"Facilities\",\"languages\":[\"hindi\"],\"age\":31,\r\n\"totalExp\":4});\r\ndb.employees.insert({\"name\":\"Mike\",\"dept\":\"HR\",\"languages\":[\"english\", \"hindi\",\r\n\"spanish\"],\"age\":26, \"totalExp\":3});\r\ndb.employees.insert({\"name\":\"Jenny\",\"dept\":\"HR\",\"languages\":[\"english\", \"hindi\",\r\n\"spanish\"],\"age\":25, \"totalExp\":3});\r\nExamples by topic:\r\n1. Match: Used to match documents (like SQL where clause)\r\ndb.employees.aggregate([{$match:{dept:\"Admin\"}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"54982fac2e9b4b54ec384a0d\"), \"name\" : \"Adma\", \"dept\" : \"Admin\", \"languages\"","metadata":{"loc":{"lines":{"from":2694,"to":2712}}}}],["114",{"pageContent":"db.employees.aggregate([{$match:{dept:\"Admin\"}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"54982fac2e9b4b54ec384a0d\"), \"name\" : \"Adma\", \"dept\" : \"Admin\", \"languages\"\r\n: [ \"german\", \"french\", \"english\", \"hindi\" ], \"age\" : 30, \"totalExp\" : 10 }\r\n{ \"_id\" : ObjectId(\"54982fc92e9b4b54ec384a0e\"), \"name\" : \"Anna\", \"dept\" : \"Admin\", \"languages\"\r\n: [ \"english\", \"hindi\" ], \"age\" : 35, \"totalExp\" : 11 }\r\n2. Project: Used to populate specific field's value(s)\r\nproject stage will include _id field automatically unless you specify to disable.\r\ndb.employees.aggregate([{$match:{dept:\"Admin\"}}, {$project:{\"name\":1, \"dept\":1}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"54982fac2e9b4b54ec384a0d\"), \"name\" : \"Adma\", \"dept\" : \"Admin\" }\r\n{ \"_id\" : ObjectId(\"54982fc92e9b4b54ec384a0e\"), \"name\" : \"Anna\", \"dept\" : \"Admin\" }\r\ndb.employees.aggregate({$project: {'_id':0, 'name': 1}})\r\nOutput:\r\n{ \"name\" : \"Adma\" }\r\n{ \"name\" : \"Anna\" }\r\n{ \"name\" : \"Bob\" }\r\n{ \"name\" : \"Cathy\" }\r\n{ \"name\" : \"Mike\" }\r\n{ \"name\" : \"Jenny\" }\r\nhttps://riptutorial.com/ 53","metadata":{"loc":{"lines":{"from":2712,"to":2732}}}}],["115",{"pageContent":"Output:\r\n{ \"name\" : \"Adma\" }\r\n{ \"name\" : \"Anna\" }\r\n{ \"name\" : \"Bob\" }\r\n{ \"name\" : \"Cathy\" }\r\n{ \"name\" : \"Mike\" }\r\n{ \"name\" : \"Jenny\" }\r\nhttps://riptutorial.com/ 53\r\n3. Group: $group is used to group documents by specific field, here documents are grouped by\r\n\"dept\" field's value. Another useful feature is that you can group by null, it means all documents\r\nwill be aggregated into one.\r\ndb.employees.aggregate([{$group:{\"_id\":\"$dept\"}}]);\r\n{ \"_id\" : \"HR\" }\r\n{ \"_id\" : \"Facilities\" }\r\n{ \"_id\" : \"Admin\" }\r\ndb.employees.aggregate([{$group:{\"_id\":null, \"totalAge\":{$sum:\"$age\"}}}]);\r\nOutput:\r\n{ \"_id\" : null, \"noOfEmployee\" : 183 }\r\n4. Sum: $sum is used to count or sum the values inside a group.\r\ndb.employees.aggregate([{$group:{\"_id\":\"$dept\", \"noOfDept\":{$sum:1}}}]);\r\nOutput:\r\n{ \"_id\" : \"HR\", \"noOfDept\" : 2 }\r\n{ \"_id\" : \"Facilities\", \"noOfDept\" : 2 }\r\n{ \"_id\" : \"Admin\", \"noOfDept\" : 2 }\r\n5. Average: Calculates average of specific field's value per group.","metadata":{"loc":{"lines":{"from":2732,"to":2756}}}}],["116",{"pageContent":"Output:\r\n{ \"_id\" : \"HR\", \"noOfDept\" : 2 }\r\n{ \"_id\" : \"Facilities\", \"noOfDept\" : 2 }\r\n{ \"_id\" : \"Admin\", \"noOfDept\" : 2 }\r\n5. Average: Calculates average of specific field's value per group.\r\ndb.employees.aggregate([{$group:{\"_id\":\"$dept\", \"noOfEmployee\":{$sum:1},\r\n\"avgExp\":{$avg:\"$totalExp\"}}}]);\r\nOutput:\r\n{ \"_id\" : \"HR\", \"noOfEmployee\" : 2, \"totalExp\" : 3 }\r\n{ \"_id\" : \"Facilities\", \"noOfEmployee\" : 2, \"totalExp\" : 9 }\r\n{ \"_id\" : \"Admin\", \"noOfEmployee\" : 2, \"totalExp\" : 10.5 }\r\n6. Minimum: Finds minimum value of a field in each group.\r\ndb.employees.aggregate([{$group:{\"_id\":\"$dept\", \"noOfEmployee\":{$sum:1},\r\n\"minExp\":{$min:\"$totalExp\"}}}]);\r\nOutput:\r\n{ \"_id\" : \"HR\", \"noOfEmployee\" : 2, \"totalExp\" : 3 }\r\n{ \"_id\" : \"Facilities\", \"noOfEmployee\" : 2, \"totalExp\" : 4 }\r\n{ \"_id\" : \"Admin\", \"noOfEmployee\" : 2, \"totalExp\" : 10 }\r\n7. Maximum: Finds maximum value of a field in each group.\r\ndb.employees.aggregate([{$group:{\"_id\":\"$dept\", \"noOfEmployee\":{$sum:1},\r\n\"maxExp\":{$max:\"$totalExp\"}}}]);\r\nOutput:","metadata":{"loc":{"lines":{"from":2756,"to":2777}}}}],["117",{"pageContent":"7. Maximum: Finds maximum value of a field in each group.\r\ndb.employees.aggregate([{$group:{\"_id\":\"$dept\", \"noOfEmployee\":{$sum:1},\r\n\"maxExp\":{$max:\"$totalExp\"}}}]);\r\nOutput:\r\n{ \"_id\" : \"HR\", \"noOfEmployee\" : 2, \"totalExp\" : 3 }\r\n{ \"_id\" : \"Facilities\", \"noOfEmployee\" : 2, \"totalExp\" : 14 }\r\n{ \"_id\" : \"Admin\", \"noOfEmployee\" : 2, \"totalExp\" : 11 }\r\n8. Getting specific field's value from first and last document of each group: Works well when\r\ndoucument result is sorted.\r\nhttps://riptutorial.com/ 54\r\ndb.employees.aggregate([{$group:{\"_id\":\"$age\", \"lasts\":{$last:\"$name\"},\r\n\"firsts\":{$first:\"$name\"}}}]);\r\nOutput:\r\n{ \"_id\" : 25, \"lasts\" : \"Jenny\", \"firsts\" : \"Jenny\" }\r\n{ \"_id\" : 26, \"lasts\" : \"Mike\", \"firsts\" : \"Mike\" }\r\n{ \"_id\" : 35, \"lasts\" : \"Cathy\", \"firsts\" : \"Anna\" }\r\n{ \"_id\" : 30, \"lasts\" : \"Adma\", \"firsts\" : \"Adma\" }\r\n9. Minumum with maximum:\r\ndb.employees.aggregate([{$group:{\"_id\":\"$dept\", \"noOfEmployee\":{$sum:1},\r\n\"maxExp\":{$max:\"$totalExp\"}, \"minExp\":{$min: \"$totalExp\"}}}]);\r\nOutput:","metadata":{"loc":{"lines":{"from":2777,"to":2797}}}}],["118",{"pageContent":"9. Minumum with maximum:\r\ndb.employees.aggregate([{$group:{\"_id\":\"$dept\", \"noOfEmployee\":{$sum:1},\r\n\"maxExp\":{$max:\"$totalExp\"}, \"minExp\":{$min: \"$totalExp\"}}}]);\r\nOutput:\r\n{ \"_id\" : \"HR\", \"noOfEmployee\" : 2, \"maxExp\" : 3, \"minExp\" : 3 }\r\n{ \"_id\" : \"Facilities\", \"noOfEmployee\" : 2, \"maxExp\" : 14, \"minExp\" : 4 }\r\n{ \"_id\" : \"Admin\", \"noOfEmployee\" : 2, \"maxExp\" : 11, \"minExp\" : 10 }\r\n10. Push and addToSet: Push adds a field's value form each document in group to an array used\r\nto project data in array format, addToSet is simlar to push but it omits duplicate values.\r\ndb.employees.aggregate([{$group:{\"_id\":\"dept\", \"arrPush\":{$push:\"$age\"}, \"arrSet\":\r\n{$addToSet:\"$age\"}}}]);\r\nOutput:\r\n{ \"_id\" : \"dept\", \"arrPush\" : [ 30, 35, 35, 35, 26, 25 ], \"arrSet\" : [ 25, 26, 35, 30 ] }\r\n11. Unwind: Used to create multiple in-memory documents for each value in the specified array\r\ntype field, then we can do further aggregation based on those values.","metadata":{"loc":{"lines":{"from":2797,"to":2811}}}}],["119",{"pageContent":"11. Unwind: Used to create multiple in-memory documents for each value in the specified array\r\ntype field, then we can do further aggregation based on those values.\r\ndb.employees.aggregate([{$match:{\"name\":\"Adma\"}}, {$unwind:\"$languages\"}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"54982fac2e9b4b54ec384a0d\"), \"name\" : \"Adma\", \"dept\" : \"HR\", \"languages\" :\r\n\"german\", \"age\" : 30, \"totalExp\" : 10 }\r\n{ \"_id\" : ObjectId(\"54982fac2e9b4b54ec384a0d\"), \"name\" : \"Adma\", \"dept\" : \"HR\", \"languages\" :\r\n\"french\", \"age\" : 30, \"totalExp\" : 10 }\r\n{ \"_id\" : ObjectId(\"54982fac2e9b4b54ec384a0d\"), \"name\" : \"Adma\", \"dept\" : \"HR\", \"languages\" :\r\n\"english\", \"age\" : 30, \"totalExp\" : 10 }\r\n{ \"_id\" : ObjectId(\"54982fac2e9b4b54ec384a0d\"), \"name\" : \"Adma\", \"dept\" : \"HR\", \"languages\" :\r\n\"hindi\", \"age\" : 30, \"totalExp\" : 10 }\r\n12. Sorting:\r\ndb.employees.aggregate([{$match:{dept:\"Admin\"}}, {$project:{\"name\":1, \"dept\":1}}, {$sort:\r\n{name: 1}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"57ff3e553dedf0228d4862ac\"), \"name\" : \"Adma\", \"dept\" : \"Admin\" }","metadata":{"loc":{"lines":{"from":2811,"to":2827}}}}],["120",{"pageContent":"db.employees.aggregate([{$match:{dept:\"Admin\"}}, {$project:{\"name\":1, \"dept\":1}}, {$sort:\r\n{name: 1}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"57ff3e553dedf0228d4862ac\"), \"name\" : \"Adma\", \"dept\" : \"Admin\" }\r\n{ \"_id\" : ObjectId(\"57ff3e5e3dedf0228d4862ad\"), \"name\" : \"Anna\", \"dept\" : \"Admin\" }\r\ndb.employees.aggregate([{$match:{dept:\"Admin\"}}, {$project:{\"name\":1, \"dept\":1}}, {$sort:\r\n{name: -1}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"57ff3e5e3dedf0228d4862ad\"), \"name\" : \"Anna\", \"dept\" : \"Admin\" }\r\n{ \"_id\" : ObjectId(\"57ff3e553dedf0228d4862ac\"), \"name\" : \"Adma\", \"dept\" : \"Admin\" }\r\n13. Skip:\r\nhttps://riptutorial.com/ 55\r\ndb.employees.aggregate([{$match:{dept:\"Admin\"}}, {$project:{\"name\":1, \"dept\":1}}, {$sort:\r\n{name: -1}}, {$skip:1}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"57ff3e553dedf0228d4862ac\"), \"name\" : \"Adma\", \"dept\" : \"Admin\" }\r\n14. Limit:\r\ndb.employees.aggregate([{$match:{dept:\"Admin\"}}, {$project:{\"name\":1, \"dept\":1}}, {$sort:\r\n{name: -1}}, {$limit:1}]);\r\nOutput:","metadata":{"loc":{"lines":{"from":2827,"to":2846}}}}],["121",{"pageContent":"14. Limit:\r\ndb.employees.aggregate([{$match:{dept:\"Admin\"}}, {$project:{\"name\":1, \"dept\":1}}, {$sort:\r\n{name: -1}}, {$limit:1}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"57ff3e5e3dedf0228d4862ad\"), \"name\" : \"Anna\", \"dept\" : \"Admin\" }\r\n15. Comparison operator in projection:\r\ndb.employees.aggregate([{$match:{dept:\"Admin\"}}, {$project:{\"name\":1, \"dept\":1, age: {$gt:\r\n[\"$age\", 30]}}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"57ff3e553dedf0228d4862ac\"), \"name\" : \"Adma\", \"dept\" : \"Admin\", \"age\" :\r\nfalse }\r\n{ \"_id\" : ObjectId(\"57ff3e5e3dedf0228d4862ad\"), \"name\" : \"Anna\", \"dept\" : \"Admin\", \"age\" :\r\ntrue }\r\n16. Comparison operator in match:\r\ndb.employees.aggregate([{$match:{dept:\"Admin\", age: {$gt:30}}}, {$project:{\"name\":1,\r\n\"dept\":1}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"57ff3e5e3dedf0228d4862ad\"), \"name\" : \"Anna\", \"dept\" : \"Admin\" }\r\nList of comparison operators: $cmp, $eq, $gt, $gte, $lt, $lte, and $ne\r\n17. Boolean aggregation opertor in projection:","metadata":{"loc":{"lines":{"from":2846,"to":2865}}}}],["122",{"pageContent":"List of comparison operators: $cmp, $eq, $gt, $gte, $lt, $lte, and $ne\r\n17. Boolean aggregation opertor in projection:\r\ndb.employees.aggregate([{$match:{dept:\"Admin\"}}, {$project:{\"name\":1, \"dept\":1, age: { $and: [\r\n{ $gt: [ \"$age\", 30 ] }, { $lt: [ \"$age\", 36 ] } ] }}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"57ff3e553dedf0228d4862ac\"), \"name\" : \"Adma\", \"dept\" : \"Admin\", \"age\" :\r\nfalse }\r\n{ \"_id\" : ObjectId(\"57ff3e5e3dedf0228d4862ad\"), \"name\" : \"Anna\", \"dept\" : \"Admin\", \"age\" :\r\ntrue }\r\n18. Boolean aggregation opertor in match:\r\ndb.employees.aggregate([{$match:{dept:\"Admin\", $and: [{age: { $gt: 30 }}, {age: {$lt: 36 }} ]\r\n}}, {$project:{\"name\":1, \"dept\":1, age: { $and: [ { $gt: [ \"$age\", 30 ] }, { $lt: [ \"$age\", 36\r\n] } ] }}}]);\r\nOutput:\r\n{ \"_id\" : ObjectId(\"57ff3e5e3dedf0228d4862ad\"), \"name\" : \"Anna\", \"dept\" : \"Admin\", \"age\" :\r\ntrue }\r\nList of boolean aggregation opertors: $and, $or, and $not.\r\nhttps://riptutorial.com/ 56\r\nComplete refrence: https://docs.mongodb.com/v3.2/reference/operator/aggregation/","metadata":{"loc":{"lines":{"from":2865,"to":2883}}}}],["123",{"pageContent":"true }\r\nList of boolean aggregation opertors: $and, $or, and $not.\r\nhttps://riptutorial.com/ 56\r\nComplete refrence: https://docs.mongodb.com/v3.2/reference/operator/aggregation/\r\nJava and Spring example\r\nThis is an example code to create and execute the aggregate query in MongoDB using Spring\r\nData.\r\ntry {\r\nMongoClient mongo = new MongoClient();\r\nDB db = mongo.getDB(\"so\");\r\nDBCollection coll = db.getCollection(\"employees\");\r\n//Equivalent to $match\r\nDBObject matchFields = new BasicDBObject();\r\nmatchFields.put(\"dept\", \"Admin\");\r\nDBObject match = new BasicDBObject(\"$match\", matchFields);\r\n//Equivalent to $project\r\nDBObject projectFields = new BasicDBObject();\r\nprojectFields.put(\"_id\", 1);\r\nprojectFields.put(\"name\", 1);\r\nprojectFields.put(\"dept\", 1);\r\nprojectFields.put(\"totalExp\", 1);\r\nprojectFields.put(\"age\", 1);\r\nprojectFields.put(\"languages\", 1);\r\nDBObject project = new BasicDBObject(\"$project\", projectFields);\r\n//Equivalent to $group\r\nDBObject groupFields = new BasicDBObject(\"_id\", \"$dept\");","metadata":{"loc":{"lines":{"from":2883,"to":2908}}}}],["124",{"pageContent":"projectFields.put(\"languages\", 1);\r\nDBObject project = new BasicDBObject(\"$project\", projectFields);\r\n//Equivalent to $group\r\nDBObject groupFields = new BasicDBObject(\"_id\", \"$dept\");\r\ngroupFields.put(\"ageSet\", new BasicDBObject(\"$addToSet\", \"$age\"));\r\nDBObject employeeDocProjection = new BasicDBObject(\"$addToSet\", new\r\nBasicDBObject(\"totalExp\", \"$totalExp\").append(\"age\", \"$age\").append(\"languages\",\r\n\"$languages\").append(\"dept\", \"$dept\").append(\"name\", \"$name\"));\r\ngroupFields.put(\"docs\", employeeDocProjection);\r\nDBObject group = new BasicDBObject(\"$group\", groupFields);\r\n//Sort results by age\r\nDBObject sort = new BasicDBObject(\"$sort\", new BasicDBObject(\"age\", 1));\r\nList<DBObject> aggregationList = new ArrayList<>();\r\naggregationList.add(match);\r\naggregationList.add(project);\r\naggregationList.add(group);\r\naggregationList.add(sort);\r\nAggregationOutput output = coll.aggregate(aggregationList);\r\nfor (DBObject result : output.results()) {\r\nBasicDBList employeeList = (BasicDBList) result.get(\"docs\");","metadata":{"loc":{"lines":{"from":2908,"to":2927}}}}],["125",{"pageContent":"aggregationList.add(sort);\r\nAggregationOutput output = coll.aggregate(aggregationList);\r\nfor (DBObject result : output.results()) {\r\nBasicDBList employeeList = (BasicDBList) result.get(\"docs\");\r\nBasicDBObject employeeDoc = (BasicDBObject) employeeList.get(0);\r\nString name = employeeDoc.get(\"name\").toString();\r\nSystem.out.println(name);\r\n}\r\n}catch (Exception ex){\r\nex.printStackTrace();\r\n}\r\nSee the \"resultSet\" value in JSON format to understand the output format:\r\nhttps://riptutorial.com/ 57\r\n[{\r\n\"_id\": \"Admin\",\r\n\"ageSet\": [35.0, 30.0],\r\n\"docs\": [{\r\n\"totalExp\": 11.0,\r\n\"age\": 35.0,\r\n\"languages\": [\"english\", \"hindi\"],\r\n\"dept\": \"Admin\",\r\n\"name\": \"Anna\"\r\n}, {\r\n\"totalExp\": 10.0,\r\n\"age\": 30.0,\r\n\"languages\": [\"german\", \"french\", \"english\", \"hindi\"],\r\n\"dept\": \"Admin\",\r\n\"name\": \"Adma\"\r\n}]\r\n}]\r\nThe \"resultSet\" contains one entry for each group, \"ageSet\" contains the list of age of each\r\nemployee of that group, \"_id\" contains the value of the field that is being used for grouping and","metadata":{"loc":{"lines":{"from":2927,"to":2958}}}}],["126",{"pageContent":"}]\r\n}]\r\nThe \"resultSet\" contains one entry for each group, \"ageSet\" contains the list of age of each\r\nemployee of that group, \"_id\" contains the value of the field that is being used for grouping and\r\n\"docs\" contains data of each employee of that group that can be used in our own code and UI.\r\nGet sample data\r\nTo get random data from certain collection refer to $sample aggregation.\r\ndb.emplyees.aggregate({ $sample: { size:1 } })\r\nwhere size stands for number of items to select.\r\nLeft Outer Join with aggregation ( $Lookup)\r\nlet col_1 = db.collection('col_1');\r\nlet col_2 = db.collection('col_2');\r\ncol_1 .aggregate([\r\n{ $match: { \"_id\": 1 } },\r\n{\r\n$lookup: {\r\nfrom: \"col_2\",\r\nlocalField: \"id\",\r\nforeignField: \"id\",\r\nas: \"new_document\"\r\n}\r\n}\r\n],function (err, result){\r\nres.send(result);\r\n});\r\nThis feature was newly released in the mongodb version 3.2 , which gives the user a stage to join\r\none collection with the matching attributes from another collection\r\nMongodb $LookUp documentation","metadata":{"loc":{"lines":{"from":2958,"to":2985}}}}],["127",{"pageContent":"});\r\nThis feature was newly released in the mongodb version 3.2 , which gives the user a stage to join\r\none collection with the matching attributes from another collection\r\nMongodb $LookUp documentation\r\nRead MongoDB Aggregation online: https://riptutorial.com/mongodb/topic/7417/mongodb-\r\nhttps://riptutorial.com/ 58\r\naggregation\r\nhttps://riptutorial.com/ 59\r\nChapter 20: MongoDB Authorization Model\r\nIntroduction\r\nAuthorization is the basically verifies user privileges. MongoDB support different kind of\r\nauthorization models. 1. Role base access control <br> Role are group of privileges, actions\r\nover resources. That are gain to users over a given namespace (Database). Actions are performs\r\non resources. Resources are any object that hold state in database.\r\nExamples\r\nBuild-in Roles\r\nBuilt-in database user roles and database administration roles roles exist in each database.\r\nDatabase User Roles\r\nread1.\r\nreadwrite2.","metadata":{"loc":{"lines":{"from":2985,"to":3004}}}}],["128",{"pageContent":"Examples\r\nBuild-in Roles\r\nBuilt-in database user roles and database administration roles roles exist in each database.\r\nDatabase User Roles\r\nread1.\r\nreadwrite2.\r\nRead MongoDB Authorization Model online: https://riptutorial.com/mongodb/topic/8114/mongodb-\r\nauthorization-model\r\nhttps://riptutorial.com/ 60\r\nChapter 21: Pluggable Storage Engines\r\nRemarks\r\nIn MongoDB 3.0, MMAP (default) and WiredTiger are the stable storage engines. Usually, if your\r\napp is read-heavy, use MMAP. If its write-heavy, use WiredTiger.\r\nYour solution may also have a mixed replica set members where you can have one node\r\nconfigured with MMAP and another with WiredTiger. You can use one to insert massive data and\r\nthe other to read with analytical tools.\r\nAfter MongoDB 3.2, WiredTiger becomes the default engine.\r\nExamples\r\nMMAP\r\nMMAP is a pluggable storage engine that was named after the mmap() Linux command. It maps\r\nfiles to the virtual memory and optimizes read calls. If you have a large file but needs to read just a","metadata":{"loc":{"lines":{"from":3004,"to":3024}}}}],["129",{"pageContent":"MMAP\r\nMMAP is a pluggable storage engine that was named after the mmap() Linux command. It maps\r\nfiles to the virtual memory and optimizes read calls. If you have a large file but needs to read just a\r\nsmall part of it, mmap() is much faster then a read() call that would bring the entire file to the\r\nmemory.\r\nOne disadvantage is that you can't have two write calls being processed in parallel for the same\r\ncollection. So, MMAP has collection-level locking (and not document-level locking as WiredTiger\r\noffers). This collection-locking is necessary because one MMAP index can reference multiples\r\ndocuments and if those docs could be updated simultaneously, the index would be inconsistent.\r\nWiredTiger\r\nWiredTiger supports LSM trees to store indexes. LSM trees are faster for write operations when\r\nyou need to write huge workloads of random inserts.\r\nIn WiredTiger, there is no in-place updates. If you need to update an element of a document, a","metadata":{"loc":{"lines":{"from":3024,"to":3036}}}}],["130",{"pageContent":"you need to write huge workloads of random inserts.\r\nIn WiredTiger, there is no in-place updates. If you need to update an element of a document, a\r\nnew document will be inserted while the old document will be deleted.\r\nWiredTiger also offers document-level concurrency. It assumes that two write operations will not\r\naffect the same document, but if it does, one operation will be rewind and executed later. That's a\r\ngreat performance boost if rewinds are rare.\r\nWiredTiger supports Snappy and zLib algorithms for compression of data and indexes in the\r\nfile system. Snappy is the default. It is less CPU-intensive but have a lower compression rate than\r\nzLib.\r\nHow to use WiredTiger Engine\r\nhttps://riptutorial.com/ 61\r\nmongod --storageEngine wiredTiger --dbpath <newWiredTigerDBPath>\r\nNote:\r\nAfter mongodb 3.2, the default engine is WiredTiger.1.\r\nnewWiredTigerDBPath should not contain data of another storage engine. To migrate your data,","metadata":{"loc":{"lines":{"from":3036,"to":3050}}}}],["131",{"pageContent":"Note:\r\nAfter mongodb 3.2, the default engine is WiredTiger.1.\r\nnewWiredTigerDBPath should not contain data of another storage engine. To migrate your data,\r\nyou have to dump them, and re-import them in the new storage engine.\r\n2.\r\nmongodump --out <exportDataDestination>\r\nmongod --storageEngine wiredTiger --dbpath <newWiredTigerDBPath>\r\nmongorestore <exportDataDestination>\r\nIn-memory\r\nAll data is stored in-memory (RAM) for faster read/access.\r\nmongo-rocks\r\nA key-value engine created to integrate with Facebook's RocksDB.\r\nFusion-io\r\nA storage engine created by SanDisk that makes it possible to bypass the OS file system layer\r\nand write directly to the storage device.\r\nTokuMX\r\nA storage engine created by Percona that uses fractal tree indexes.\r\nRead Pluggable Storage Engines online: https://riptutorial.com/mongodb/topic/694/pluggable-\r\nstorage-engines\r\nhttps://riptutorial.com/ 62\r\nChapter 22: Python Driver\r\nSyntax","metadata":{"loc":{"lines":{"from":3050,"to":3071}}}}],["132",{"pageContent":"Read Pluggable Storage Engines online: https://riptutorial.com/mongodb/topic/694/pluggable-\r\nstorage-engines\r\nhttps://riptutorial.com/ 62\r\nChapter 22: Python Driver\r\nSyntax\r\nmongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?option•\r\nParameters\r\nParameter Detail\r\nhostX Optional. You can specify as many hosts as necessary. You would specify\r\nmultiple hosts, for example, for connections to replica sets.\r\n:portX Optional. The default value is :27017 if not specified.\r\ndatabase\r\nOptional. The name of the database to authenticate if the connection string\r\nincludes authentication credentialsIf /database is not specified and the\r\nconnection string includes credentials, the driver will authenticate to the admin\r\ndatabase.\r\n?options Connection specific options\r\nExamples\r\nConnect to MongoDB using pymongo\r\nfrom pymongo import MongoClient\r\nuri = \"mongodb://localhost:27017/\"\r\nclient = MongoClient(uri)\r\ndb = client['test_db']\r\n# or\r\n# db = client.test_db","metadata":{"loc":{"lines":{"from":3071,"to":3095}}}}],["133",{"pageContent":"Examples\r\nConnect to MongoDB using pymongo\r\nfrom pymongo import MongoClient\r\nuri = \"mongodb://localhost:27017/\"\r\nclient = MongoClient(uri)\r\ndb = client['test_db']\r\n# or\r\n# db = client.test_db\r\n# collection = db['test_collection']\r\n# or\r\ncollection = db.test_collection\r\ncollection.save({\"hello\":\"world\"})\r\nprint collection.find_one()\r\nPyMongo queries\r\nhttps://riptutorial.com/ 63\r\nOnce you got a collection object, queries use the same syntax as in the mongo shell. Some slight\r\ndifferences are:\r\nevery key must be enclosed in brackets. For example:\r\ndb.find({frequencies: {$exists: true}})\r\nbecomes in pymongo (note the True in uppercase):\r\ndb.find({\"frequencies\": { \"$exists\": True }})\r\n•\r\nobjects such as object ids or ISODate are manipulated using python classes. PyMongo uses\r\nits own ObjectId class to deal with object ids, while dates use the standard datetime package.\r\nFor example, if you want to query all events between 2010 and 2011, you can do:\r\nfrom datetime import datetime\r\ndate_from = datetime(2010, 1, 1)","metadata":{"loc":{"lines":{"from":3095,"to":3121}}}}],["134",{"pageContent":"For example, if you want to query all events between 2010 and 2011, you can do:\r\nfrom datetime import datetime\r\ndate_from = datetime(2010, 1, 1)\r\ndate_to = datetime(2011, 1, 1)\r\ndb.find({ \"date\": { \"$gte\": date_from, \"$lt\": date_to } }):\r\n•\r\nUpdate all documents in a collection using PyMongo\r\nLet's say you need to add a field to every document in a collection.\r\nimport pymongo\r\nclient = pymongo.MongoClient('localhost', 27017)\r\ndb = client.mydb.mycollection\r\nfor doc in db.find():\r\ndb.update(\r\n{'_id': doc['_id']},\r\n{'$set': {'newField': 10} }, upsert=False, multi=False)\r\nThe find method returns a Cursor, on which you can easily iterate over using the for in syntax.\r\nThen, we call the update method, specifying the _id and that we add a field ($set). The parameters\r\nupsert and multi come from mongodb (see here for more info).\r\nRead Python Driver online: https://riptutorial.com/mongodb/topic/7843/python-driver\r\nhttps://riptutorial.com/ 64\r\nChapter 23: Querying for Data ( Getting\r\nStarted )\r\nIntroduction","metadata":{"loc":{"lines":{"from":3121,"to":3143}}}}],["135",{"pageContent":"Read Python Driver online: https://riptutorial.com/mongodb/topic/7843/python-driver\r\nhttps://riptutorial.com/ 64\r\nChapter 23: Querying for Data ( Getting\r\nStarted )\r\nIntroduction\r\nBasic querying examples\r\nExamples\r\nFind()\r\nretrieve all documents in a collection\r\ndb.collection.find({});\r\nretrieve documents in a collection using a condition ( similar to WHERE in MYSQL )\r\ndb.collection.find({key: value});\r\nexample\r\ndb.users.find({email:\"sample@email.com\"});\r\nretrieve documents in a collection using Boolean conditions (Query Operators)\r\n//AND\r\ndb.collection.find( {\r\n$and: [\r\n{ key: value }, { key: value }\r\n]\r\n})\r\n//OR\r\ndb.collection.find( {\r\n$or: [\r\n{ key: value }, { key: value }\r\n]\r\n})\r\n//NOT\r\ndb.inventory.find( { key: { $not: value } } )\r\nmore boolean operations and examples can be found here\r\nNOTE: find() will keep on searching the collection even if a document match has been found ,\r\ntherefore it is inefficient when used in a large collection , however by carefully modeling your data","metadata":{"loc":{"lines":{"from":3143,"to":3174}}}}],["136",{"pageContent":"NOTE: find() will keep on searching the collection even if a document match has been found ,\r\ntherefore it is inefficient when used in a large collection , however by carefully modeling your data\r\nand/or using indexes you can increase the efficiency of find()\r\nFindOne()\r\ndb.collection.findOne({});\r\nhttps://riptutorial.com/ 65\r\nthe querying functionality is similar to find() but this will end execution the moment it finds one\r\ndocument matching its condition , if used with and empty object , it will fetch the first document\r\nand return it . findOne() mongodb api documentation\r\nQuery Document - Using AND, OR and IN Conditions\r\nAll documents from students collection.\r\n> db.students.find().pretty();\r\n{\r\n\"_id\" : ObjectId(\"58f29a694117d1b7af126dca\"),\r\n\"studentNo\" : 1,\r\n\"firstName\" : \"Prosen\",\r\n\"lastName\" : \"Ghosh\",\r\n\"age\" : 25\r\n}\r\n{\r\n\"_id\" : ObjectId(\"58f29a694117d1b7af126dcb\"),\r\n\"studentNo\" : 2,\r\n\"firstName\" : \"Rajib\",\r\n\"lastName\" : \"Ghosh\",\r\n\"age\" : 25\r\n}\r\n{\r\n\"_id\" : ObjectId(\"58f29a694117d1b7af126dcc\"),","metadata":{"loc":{"lines":{"from":3174,"to":3201}}}}],["137",{"pageContent":"\"age\" : 25\r\n}\r\n{\r\n\"_id\" : ObjectId(\"58f29a694117d1b7af126dcb\"),\r\n\"studentNo\" : 2,\r\n\"firstName\" : \"Rajib\",\r\n\"lastName\" : \"Ghosh\",\r\n\"age\" : 25\r\n}\r\n{\r\n\"_id\" : ObjectId(\"58f29a694117d1b7af126dcc\"),\r\n\"studentNo\" : 3,\r\n\"firstName\" : \"Rizve\",\r\n\"lastName\" : \"Amin\",\r\n\"age\" : 23\r\n}\r\n{\r\n\"_id\" : ObjectId(\"58f29a694117d1b7af126dcd\"),\r\n\"studentNo\" : 4,\r\n\"firstName\" : \"Jabed\",\r\n\"lastName\" : \"Bangali\",\r\n\"age\" : 25\r\n}\r\n{\r\n\"_id\" : ObjectId(\"58f29a694117d1b7af126dce\"),\r\n\"studentNo\" : 5,\r\n\"firstName\" : \"Gm\",\r\n\"lastName\" : \"Anik\",\r\n\"age\" : 23\r\n}\r\nSimilar mySql Query of the above command.\r\nSELECT * FROM students;\r\ndb.students.find({firstName:\"Prosen\"});\r\n{ \"_id\" : ObjectId(\"58f2547804951ad51ad206f5\"), \"studentNo\" : \"1\", \"firstName\" : \"Prosen\",\r\n\"lastName\" : \"Ghosh\", \"age\" : \"23\" }\r\nSimilar mySql Query of the above command.\r\nhttps://riptutorial.com/ 66\r\nSELECT * FROM students WHERE firstName = \"Prosen\";\r\nAND Queries\r\ndb.students.find({\r\n\"firstName\": \"Prosen\",\r\n\"age\": {\r\n\"$gte\": 23\r\n}\r\n});","metadata":{"loc":{"lines":{"from":3201,"to":3245}}}}],["138",{"pageContent":"https://riptutorial.com/ 66\r\nSELECT * FROM students WHERE firstName = \"Prosen\";\r\nAND Queries\r\ndb.students.find({\r\n\"firstName\": \"Prosen\",\r\n\"age\": {\r\n\"$gte\": 23\r\n}\r\n});\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dca\"), \"studentNo\" : 1, \"firstName\" : \"Prosen\",\r\n\"lastName\" : \"Ghosh\", \"age\" : 25 }\r\nSimilar mySql Query of the above command.\r\nSELECT * FROM students WHERE firstName = \"Prosen\" AND age >= 23\r\nOr Queries\r\ndb.students.find({\r\n\"$or\": [{\r\n\"firstName\": \"Prosen\"\r\n}, {\r\n\"age\": {\r\n\"$gte\": 23\r\n}\r\n}]\r\n});\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dca\"), \"studentNo\" : 1, \"firstName\" : \"Prosen\",\r\n\"lastName\" : \"Ghosh\", \"age\" : 25 }\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dcb\"), \"studentNo\" : 2, \"firstName\" : \"Rajib\",\r\n\"lastName\" : \"Ghosh\", \"age\" : 25 }\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dcc\"), \"studentNo\" : 3, \"firstName\" : \"Rizve\",\r\n\"lastName\" : \"Amin\", \"age\" : 23 }\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dcd\"), \"studentNo\" : 4, \"firstName\" : \"Jabed\",\r\n\"lastName\" : \"Bangali\", \"age\" : 25 }","metadata":{"loc":{"lines":{"from":3245,"to":3275}}}}],["139",{"pageContent":"\"lastName\" : \"Amin\", \"age\" : 23 }\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dcd\"), \"studentNo\" : 4, \"firstName\" : \"Jabed\",\r\n\"lastName\" : \"Bangali\", \"age\" : 25 }\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dce\"), \"studentNo\" : 5, \"firstName\" : \"Gm\",\r\n\"lastName\" : \"Anik\", \"age\" : 23 }\r\nSimilar mySql Query of the above command.\r\nSELECT * FROM students WHERE firstName = \"Prosen\" OR age >= 23\r\nAnd OR Queries\r\ndb.students.find({\r\nfirstName : \"Prosen\",\r\n$or : [\r\n{age : 23},\r\n{age : 25}\r\n]\r\n});\r\nhttps://riptutorial.com/ 67\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dca\"), \"studentNo\" : 1, \"firstName\" : \"Prosen\",\r\n\"lastName\" : \"Ghosh\", \"age\" : 25 }\r\nSimilar mySql Query of the above command.\r\nSELECT * FROM students WHERE firstName = \"Prosen\" AND age = 23 OR age = 25;\r\nIN Queries This queries can improve multiple use of OR Queries\r\ndb.students.find(lastName:{$in:[\"Ghosh\", \"Amin\"]})\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dca\"), \"studentNo\" : 1, \"firstName\" : \"Prosen\",\r\n\"lastName\" : \"Ghosh\", \"age\" : 25 }","metadata":{"loc":{"lines":{"from":3275,"to":3298}}}}],["140",{"pageContent":"db.students.find(lastName:{$in:[\"Ghosh\", \"Amin\"]})\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dca\"), \"studentNo\" : 1, \"firstName\" : \"Prosen\",\r\n\"lastName\" : \"Ghosh\", \"age\" : 25 }\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dcb\"), \"studentNo\" : 2, \"firstName\" : \"Rajib\",\r\n\"lastName\" : \"Ghosh\", \"age\" : 25 }\r\n{ \"_id\" : ObjectId(\"58f29a694117d1b7af126dcc\"), \"studentNo\" : 3, \"firstName\" : \"Rizve\",\r\n\"lastName\" : \"Amin\", \"age\" : 23 }\r\nSimilar mySql query to above command\r\nselect * from students where lastName in ('Ghosh', 'Amin')\r\nfind() method with Projection\r\nThe basic syntax of find() method with projection is as follows\r\n> db.COLLECTION_NAME.find({},{KEY:1});\r\nIf you want to show all documents without the age field then the command is as follows\r\ndb.people.find({},{age : 0});\r\nIf you want to show all documents the age field then the command is as follows\r\nFind() method with Projection\r\nIn MongoDB, projection means selecting only the necessary data rather than selecting whole of\r\nthe data of a document.","metadata":{"loc":{"lines":{"from":3298,"to":3315}}}}],["141",{"pageContent":"Find() method with Projection\r\nIn MongoDB, projection means selecting only the necessary data rather than selecting whole of\r\nthe data of a document.\r\nThe basic syntax of find() method with projection is as follows\r\n> db.COLLECTION_NAME.find({},{KEY:1});\r\nIf you want to to show all document without the age field then the command is as follows\r\n> db.people.find({},{age:0});\r\nIf you want to show only the age field then the command is as follows\r\nhttps://riptutorial.com/ 68\r\n> db.people.find({},{age:1});\r\nNote: _id field is always displayed while executing find() method, if you don't want this field, then\r\nyou need to set it as 0.\r\n> db.people.find({},{name:1,_id:0});\r\nNote: 1 is used to show the field while 0 is used to hide the fields.\r\nlimit, skip, sort and count the results of the find() method\r\nSimilar to aggregation methods also by the find() method you have the possibility to limit, skip, sort\r\nand count the results. Let say we have following collection:\r\ndb.test.insertMany([","metadata":{"loc":{"lines":{"from":3315,"to":3332}}}}],["142",{"pageContent":"Similar to aggregation methods also by the find() method you have the possibility to limit, skip, sort\r\nand count the results. Let say we have following collection:\r\ndb.test.insertMany([\r\n{name:\"Any\", age:\"21\", status:\"busy\"},\r\n{name:\"Tony\", age:\"25\", status:\"busy\"},\r\n{name:\"Bobby\", age:\"28\", status:\"online\"},\r\n{name:\"Sonny\", age:\"28\", status:\"away\"},\r\n{name:\"Cher\", age:\"20\", status:\"online\"}\r\n])\r\nTo list the collection:\r\ndb.test.find({})\r\nWill return:\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b0\"), \"name\" : \"Any\", \"age\" : \"21\", \"status\" :\r\n\"busy\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b1\"), \"name\" : \"Tony\", \"age\" : \"25\", \"status\" :\r\n\"busy\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b2\"), \"name\" : \"Bobby\", \"age\" : \"28\", \"status\" :\r\n\"online\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b3\"), \"name\" : \"Sonny\", \"age\" : \"28\", \"status\" :\r\n\"away\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b4\"), \"name\" : \"Cher\", \"age\" : \"20\", \"status\" :\r\n\"online\" }\r\nTo skip first 3 documents:\r\ndb.test.find({}).skip(3)","metadata":{"loc":{"lines":{"from":3332,"to":3355}}}}],["143",{"pageContent":"\"away\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b4\"), \"name\" : \"Cher\", \"age\" : \"20\", \"status\" :\r\n\"online\" }\r\nTo skip first 3 documents:\r\ndb.test.find({}).skip(3)\r\nWill return:\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b3\"), \"name\" : \"Sonny\", \"age\" : \"28\", \"status\" :\r\n\"away\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b4\"), \"name\" : \"Cher\", \"age\" : \"20\", \"status\" :\r\n\"online\" }\r\nTo sort descending by the field name:\r\nhttps://riptutorial.com/ 69\r\ndb.test.find({}).sort({ \"name\" : -1})\r\nWill return:\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b1\"), \"name\" : \"Tony\", \"age\" : \"25\", \"status\" :\r\n\"busy\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b3\"), \"name\" : \"Sonny\", \"age\" : \"28\", \"status\" :\r\n\"away\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b4\"), \"name\" : \"Cher\", \"age\" : \"20\", \"status\" :\r\n\"online\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b2\"), \"name\" : \"Bobby\", \"age\" : \"28\", \"status\" :\r\n\"online\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b0\"), \"name\" : \"Any\", \"age\" : \"21\", \"status\" :\r\n\"busy\" }","metadata":{"loc":{"lines":{"from":3355,"to":3378}}}}],["144",{"pageContent":"{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b2\"), \"name\" : \"Bobby\", \"age\" : \"28\", \"status\" :\r\n\"online\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b0\"), \"name\" : \"Any\", \"age\" : \"21\", \"status\" :\r\n\"busy\" }\r\nIf you want to sort ascending just replace -1 with 1\r\nTo count the results:\r\ndb.test.find({}).count()\r\nWill return:\r\n5\r\nAlso combinations of this methods are allowed. For example get 2 documents from descending\r\nsorted collection skipping the first 1:\r\ndb.test.find({}).sort({ \"name\" : -1}).skip(1).limit(2)\r\nWill return:\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b3\"), \"name\" : \"Sonny\", \"age\" : \"28\", \"status\" :\r\n\"away\" }\r\n{ \"_id\" : ObjectId(\"592516d7fbd5b591f53237b4\"), \"name\" : \"Cher\", \"age\" : \"20\", \"status\" :\r\n\"online\" }\r\nRead Querying for Data ( Getting Started ) online:\r\nhttps://riptutorial.com/mongodb/topic/9271/querying-for-data---getting-started--\r\nhttps://riptutorial.com/ 70\r\nChapter 24: Replication\r\nExamples\r\nBasic configuration with three nodes","metadata":{"loc":{"lines":{"from":3378,"to":3400}}}}],["145",{"pageContent":"https://riptutorial.com/mongodb/topic/9271/querying-for-data---getting-started--\r\nhttps://riptutorial.com/ 70\r\nChapter 24: Replication\r\nExamples\r\nBasic configuration with three nodes\r\nThe replica set is a group of mongod instances that maintain the same data set.\r\nThis example shows how to configure a replica set with three instances on the same server.\r\nCreating data folders\r\nmkdir /srv/mongodb/data/rs0-0\r\nmkdir /srv/mongodb/data/rs0-1\r\nmkdir /srv/mongodb/data/rs0-2\r\nStarting mongod instances\r\nmongod --port 27017 --dbpath /srv/mongodb/data/rs0-0 --replSet rs0\r\nmongod --port 27018 --dbpath /srv/mongodb/data/rs0-1 --replSet rs0\r\nmongod --port 27019 --dbpath /srv/mongodb/data/rs0-2 --replSet rs0\r\nConfiguring replica set\r\nmongo --port 27017 // connection to the instance 27017\r\nrs.initiate(); // initilization of replica set on the 1st node\r\nrs.add(\"<hostname>:27018\") // adding a 2nd node\r\nrs.add(\"<hostname>:27019\") // adding a 3rd node\r\nTesting your setup","metadata":{"loc":{"lines":{"from":3400,"to":3420}}}}],["146",{"pageContent":"rs.initiate(); // initilization of replica set on the 1st node\r\nrs.add(\"<hostname>:27018\") // adding a 2nd node\r\nrs.add(\"<hostname>:27019\") // adding a 3rd node\r\nTesting your setup\r\nFor checking the configuration type rs.status(), the result should be like:\r\n{\r\n\"set\" : \"rs0\",\r\n\"date\" : ISODate(\"2016-09-01T12:34:24.968Z\"),\r\n\"myState\" : 1,\r\n\"term\" : NumberLong(4),\r\n\"heartbeatIntervalMillis\" : NumberLong(2000),\r\n\"members\" : [\r\n{\r\n\"_id\" : 0,\r\n\"name\" : \"<hostname>:27017\",\r\n\"health\" : 1,\r\n\"state\" : 1,\r\n\"stateStr\" : \"PRIMARY\",\r\n...........................\r\n},\r\n{\r\n\"_id\" : 1,\r\nhttps://riptutorial.com/ 71\r\n\"name\" : \"<hostname>:27018\",\r\n\"health\" : 1,\r\n\"state\" : 2,\r\n\"stateStr\" : \"SECONDARY\",\r\n...........................\r\n},\r\n{\r\n\"_id\" : 2,\r\n\"name\" : \"<hostname>:27019\",\r\n\"health\" : 1,\r\n\"state\" : 2,\r\n\"stateStr\" : \"SECONDARY\",\r\n...........................\r\n}\r\n],\r\n\"ok\" : 1\r\n}\r\nRead Replication online: https://riptutorial.com/mongodb/topic/6205/replication\r\nhttps://riptutorial.com/ 72\r\nChapter 25: Update Operators\r\nSyntax","metadata":{"loc":{"lines":{"from":3420,"to":3463}}}}],["147",{"pageContent":"...........................\r\n}\r\n],\r\n\"ok\" : 1\r\n}\r\nRead Replication online: https://riptutorial.com/mongodb/topic/6205/replication\r\nhttps://riptutorial.com/ 72\r\nChapter 25: Update Operators\r\nSyntax\r\n{ $set: { <field1>:<value1>, <field2>:<value2>, ... } }•\r\nParameters\r\nparameters Meaning\r\nfieldName Field will be updated :{name: 'Tom'}\r\ntargetVaule Value will be assigned to the field :{name: 'Tom'}\r\nRemarks\r\nReference for $set operator: $set on offical website\r\nExamples\r\n$set operator to update specified field(s) in document(s)\r\nI.Overview\r\nA significant difference between MongoDB & RDBMS is MongoDB has many kinds of operators.\r\nOne of them is update operator, which is used in update statements.\r\nII.What happen if we don't use update\r\noperators?\r\nSuppose we have a student collection to store student information(Table view):\r\nhttps://riptutorial.com/ 73\r\nOne day you get a job that need to change Tom's gender from \"M\" to \"F\". That's easy, right? So","metadata":{"loc":{"lines":{"from":3463,"to":3488}}}}],["148",{"pageContent":"https://riptutorial.com/ 73\r\nOne day you get a job that need to change Tom's gender from \"M\" to \"F\". That's easy, right? So\r\nyou write below statement very quickly based on your RDBMS experience:\r\ndb.student.update(\r\n{name: 'Tom'}, // query criteria\r\n{sex: 'F'} // update action\r\n);\r\nLet's see what is the result:\r\nWe lost Tom's age & name! From this example, we can know that the whole document will be\r\noverrided if without any update operator in update statement. This is the default behavior of\r\nMongoDB.\r\nIII.$set operator\r\nIf we want to change only the 'sex' field in Tom's document, we can use $set to specify which\r\nfield(s) we want to update:\r\ndb.student.update(\r\n{name: 'Tom'}, // query criteria\r\n{$set: {sex: 'F'}} // update action\r\n);\r\nThe value of $set is an object, its fields stands for those fields you want to update in the\r\ndocuments, and the values of these fields are the target values.\r\nSo, the result is correct now:\r\nhttps://riptutorial.com/ 74","metadata":{"loc":{"lines":{"from":3488,"to":3509}}}}],["149",{"pageContent":"documents, and the values of these fields are the target values.\r\nSo, the result is correct now:\r\nhttps://riptutorial.com/ 74\r\nAlso, if you want to change both 'sex' and 'age' at the same time, you can append them to $set :\r\ndb.student.update(\r\n{name: 'Tom'}, // query criteria\r\n{$set: {sex: 'F', age: 40}} // update action\r\n);\r\nRead Update Operators online: https://riptutorial.com/mongodb/topic/5880/update-operators\r\nhttps://riptutorial.com/ 75\r\nChapter 26: Upgrading MongoDB version\r\nIntroduction\r\nHow to update the version of MongoDB on your machine on different platforms and versions.\r\nRemarks\r\nIf you have an older version of MongoDB, you must upgrade the whole path to the newest version.\r\nFor example, if you are running version 3.0 and want to get version 3.4, you must upgrade 3.0-\r\n>3.2->3.4.\r\nExamples\r\nUpgrading to 3.4 on Ubuntu 16.04 using apt\r\nYou must have 3.2 to be able to upgrade to 3.4. This example assumes you are using apt.\r\nsudo service mongod stop0.","metadata":{"loc":{"lines":{"from":3509,"to":3529}}}}],["150",{"pageContent":">3.2->3.4.\r\nExamples\r\nUpgrading to 3.4 on Ubuntu 16.04 using apt\r\nYou must have 3.2 to be able to upgrade to 3.4. This example assumes you are using apt.\r\nsudo service mongod stop0.\r\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv\r\n0C49F3730359A14518585931BC711F9BA15703C6\r\n1.\r\necho \"deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4\r\nmultiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\r\n2.\r\nsudo apt-get update3.\r\nsudo apt-get upgrade4.\r\nsudo service mongod start5.\r\nEnsure the new version is running with mongo. The shell will print out the MongoDB server version\r\nthat should be 3.4 now.\r\nRead Upgrading MongoDB version online: https://riptutorial.com/mongodb/topic/9851/upgrading-\r\nmongodb-version\r\nhttps://riptutorial.com/ 76\r\nChapter 27: Upserts and Inserts\r\nExamples\r\nInsert a document\r\n_id is a 12 bytes hexadecimal number which assures the uniqueness of every document. You can","metadata":{"loc":{"lines":{"from":3529,"to":3551}}}}],["151",{"pageContent":"mongodb-version\r\nhttps://riptutorial.com/ 76\r\nChapter 27: Upserts and Inserts\r\nExamples\r\nInsert a document\r\n_id is a 12 bytes hexadecimal number which assures the uniqueness of every document. You can\r\nprovide _id while inserting the document. If you didn't provide then MongoDB provide a unique\r\nid for every document. These 12 bytes first 4 bytes for the current timestamp, next 3 bytes for\r\nmachine id, next 2 bytes for process id of mongodb server and remaining 3 bytes are simple\r\nincremental value.\r\ndb.mycol.insert({\r\n_id: ObjectId(7df78ad8902c),\r\ntitle: 'MongoDB Overview',\r\ndescription: 'MongoDB is no sql database',\r\nby: 'tutorials point',\r\nurl: 'http://www.tutorialspoint.com',\r\ntags: ['mongodb', 'database', 'NoSQL'],\r\nlikes: 100\r\n})\r\nHere mycol is a collection name, if the collection doesn't exist in the database, then MongoDB will\r\ncreate this collection and then insert document into it. In the inserted document if we don't specify","metadata":{"loc":{"lines":{"from":3551,"to":3571}}}}],["152",{"pageContent":"create this collection and then insert document into it. In the inserted document if we don't specify\r\nthe _id parameter, then MongoDB assigns an unique ObjectId for this document.\r\nRead Upserts and Inserts online: https://riptutorial.com/mongodb/topic/10185/upserts-and-inserts\r\nhttps://riptutorial.com/ 77","metadata":{"loc":{"lines":{"from":3571,"to":3574}}}}]]